=pod

=head2 emergence_movie

=for ref 

Given feature history, tab files, and data frames, generate a movie
showing different types of emergence event.

=for usage 

emergence_movie($hist,$tab,\@data,\@assoc,{options})

C<$hist> is a history table from frag_hist, C<$tab> is a tabulation file
from frag_tabulate, C<\@data> is an array ref of FITS files containing the
original data (or a diskcache object, of course). C<\@assoc> is an array ref of FITS files containing the id masks (i.e., the output of frag_assoc modified by frag_tabulate) (or a diskcache object).

By default the frames are written to the directory "movie"; options can
change the movie directory.

OPTIONS

=over 3

=item dir (default 'movie')

directory in which to write the movie frames.  If it exists, all contents are removed.  If it does not exist, it is created.

=item fname (default 'frame')

Prefix on the image file name

=item size (default [10,10])

Output image size (inches)

=item start (default 4)

number of frames to wait at the start of the movie before showing events

=item pre,post (default 4,20)

Pre and post event illumination frame count

=item range (default [-50,50])

The minimum and maximum pixel intensities to clip to.

=item decay (default 0.94)

Constant to adjust the decay timescale.  Should always be <1.0, smaller means faster decays.

=item evmask (default [1,1,1,1,1,1])

The types of events to highlight.  This needs to be a 6-element array,
and each element references the corresponding birth mechanism
identified in frag_hist.  The tricky thing is that ERROR (-1) is the
last element in evmask, so the order goes: [Survival, Appearance,
Emergence, Fragmentation, Complex, Error]

=item options (default {} )

Any extra options to pass to fits_imag. Setting 'dr' or 'DrawWedge'
will force drawing of the color table wedge (not implemented yet!).

=item radius (default 20)

Radius (in pixels) of the event circle

=item id_feats (default 0)

Whether to label the features with their ID number or not.  If 1, put
a text label next to the feature.  If 2, make a Pizza-plot (mask out
the feature with a color unique to that feature.

=item contour (default 0)

Whether to draw a boundary around the features (2) or just use a
circle (1), or not draw any delimiter at all (0).

=item anti (default 1)

If greater than 1, divide the image size by this factor before
producing the output image.  Also is an adjustment factor in character
size of the feature ids.

=item plot_range (default [0,0,-1,-1])

Portion of the image (in pixels) to plot.  Default plots the whole
image.  Format is [llx,lly,urx,ury].

=item format (default 'ppm')

The image format to output.  Currently accepted options are

=over 2

=item ppm

Portable Pixmap

=item vps

Vertical Postscript

=item vcps,cvps

Vertical Color Postscript

=item xw

X-window

=item xs

Persistent X-window

=back

=back

BUGS

Implement the 'draw wedge' feature mentioned in the 'options' option.

HISTORY

Craig DeForest May 2004--original code

Derek Lamb April 2005--bug finding and fixing, added documentation

Derek Lamb January 2007--colorfied the contours. Implemented 'start' option

Derek Lamb July 2007--Added plotrange option.

=cut

use Carp;
use strict;
use PDL;
use PDL::NiceSlice;
use PDL::Transform;

sub emergence_movie {
    $|=1;
    my($hist,$tabs,$data,$ids,$opt) = @_;
    
    $opt = {} unless defined($opt);
    
    my $dir   = $opt->{dir} || "movie";   # Dir for movies
    $dir = $dir . "/" unless $dir=~m/\/$/;
    my $fname = $opt->{fname} || "frame";  # Frame name template
    my $size  = $opt->{size}  || [10,10];  # Frame size (inches)
    
#    my $start = $opt->{start} || 4;        
    my $start = defined($opt->{start})?$opt->{start}:4; # Don't show events in first n frames
    my $pre   = $opt->{pre}   || 4;        # Pre-illumination frame count
    my $post  = $opt->{post}  || 20;       # Post-illumination frame count
    my $range = $opt->{range} || [-50,50]; # Data range to display
    my $decay = $opt->{decay} || 0.94;
    my $evmask = $opt->{evmask} || [1,1,1,1,1,1];
    my $imag_options = $opt->{options} || {};
    
    my $radius = $opt->{radius} || 20;    # Radius (in pixels) of marks
    
    my $id_feats = $opt->{id_feats} || 0; # whether to label each feature
    my $contour = $opt->{contour} || 0;   # whether to circle each feature
    
    my $ap_color =   pdl(-0.3,0.3,0.6);   # Appearances are bluish
    my $em_color   =  pdl(0.5,0.5,-0.4);  # Emergences are yellow
    
    my $frag_color = pdl(-0.1,0.3,-0.1);  # Fragmentations are green
    my $cmplx_color = pdl(-0.1,-0.1,-0.1); 
    my $err_color = pdl(0.2,-0.1,-0.1); # Errors are faint red
    $opt->{plot_range} = [0,0,-1,-1] unless defined ($opt->{plot_range});

    my $anti_alias = $opt->{anti} || 1;

    my $format = $opt->{format} || 'ppm';
    my %format_string = ('ppm'=>'ppm/ppm',
			 'vps'=>'ps/vps',
			 'vcps'=>'ps/vcps',
			 'cvps'=>'ps/vcps',
			 'xw'=>'/xw',
			 'xs'=>'/xs',
			 );

    barf "Unsupported format option $format" unless defined $format_string{$format};

    my @colors = (zeroes(3), $ap_color, $em_color, $frag_color, $cmplx_color, $err_color);
    
    my $rr = rvals(2*$radius+1,2*$radius+1);
    my $cmask = $rr*$rr*$rr*($rr<=$radius);
    $cmask /= $cmask->max;
    
    `rm -rf $dir`;
    `mkdir $dir`;
    
    my $i;
    my $im;

    my $framename;
    for $i(0..$#$data) {
	print "Frame $i...";
	$framename=sprintf("%s%s%3.3d.%s",$dir,$fname,$i,$format_string{$format});
	$framename = $format_string{$format} if ($format_string{$format}=~m/xs|xw/);
	my $w = pgwin(dev=>$framename,size=>$size);
	# RGB-ify data and scale to [0,1].
	$im = $data->[$i]->float->clip(@$range)->dummy(2,3)->copy;
#	$im = $data->[$i]->float->clip(@$range)->copy;
	$im->sethdr($data->[$i]->hdr_copy);
	$im->hdrcpy(1);
	$im -= $range->[0];
	$im /= ($range->[1]-$range->[0]);
	
	print "...";
	##############################
	# Identify start events and locations
	if ($i>=$start){
	    my $st = which(($hist->(:,(0)) >= $i-$post) & ($hist->(:,(0)) <= $i+$pre));
	    print " ".$st->nelem." events...";
	    my $event;
	    foreach $event($st->list) {
		
		my $h = $hist->(($event));
		next unless( $evmask->[$h->at(1)]);
		
#     my $grab = ($i<$h->(0)?$h->(7:8):$tabs->(($event),($i),2:3));
		my $grab = $h->(7:8);
		
		my $imr = $im->range($grab-$radius,$radius*2+1,'t');
		
		$imr += $cmask * $colors[$h->at(1)]->(*1,*1) * pow($decay,$i+$pre-$h->at(0)) if($evmask->[$h->at(1)]) ;
	    }
	}
	my $title = sprintf("%s %s",$im->hdr->{'DATE-OBS'},$im->hdr->{'TIME-OBS'});
	my $t = t_fits($im);
#       my $t = t_identity();	    

#there's probably an easier way to do this, but I'm too lazy to figure it out. DAL
	my $plot_range = pdl($opt->{plot_range});
	$plot_range->(0)+=$im->dim(0) if $plot_range->at(0) == -1;
	$plot_range->(1)+=$im->dim(1) if $plot_range->at(1) == -1;
	$plot_range->(2)+=$im->dim(0) if $plot_range->at(2) == -1;
	$plot_range->(3)+=$im->dim(1) if $plot_range->at(3) == -1;
	$plot_range = $plot_range->reshape(2,2)->apply($t)->flat;# unless $i;

	print "plot_range = $plot_range\n";

	$w->fits_imag($im->clip(0.01,0.99),0,1,{xr=>[$plot_range->at(0),$plot_range->at(2)],yr=>[$plot_range->at(1),$plot_range->at(3)],j=>1,title=>$title,dr=>0,charsize=>0.99,%$imag_options});
	$w->hold;

	if($id_feats || $contour) {
	    my $id;
	    
	    my($boundaries)=zeroes(3,1);

	    for $id(which($tabs->(:,($i),((0))))->list) {
		my $xy = $tabs->(($id),($i),2:3)->apply($t);
#skip if center position is not in our FOV.  Not the best way, but sufficient.
		next if ($xy->at(0) < $plot_range->at(0) ||
			 $xy->at(0) > $plot_range->at(2) ||
			 $xy->at(1) < $plot_range->at(1) ||
			 $xy->at(1) > $plot_range->at(3) 
			 );

		my $r = sqrt($tabs->(($id),($i),(1))/3.14159) * $im->hdr->{CDELT1};
		
		if($contour==2) {
		    $boundaries(2,-1) .= 0; # lift up pen
		    my $l = boundary($id,$ids->[$i]);
		    $l((2)).=($tabs->(($id),($i),(0))>0)?1:255 if ($format eq 'vps');
		    $boundaries = $boundaries->glue(1,$l);

		} elsif($contour==1) {
		    $w->ellipse($xy->at(0),$xy->at(1),$r,$r,{fill=>2,color=>3});
		}
		
		$w->text($id,$xy->at(0)+$r*1.05,$xy->at(1),{charsize=>0.67*$anti_alias,color=>3}) if $id_feats;
		print ".";
	    }

	    if($contour==2) {
		$w->lines( $boundaries->apply($t),{color=>1});
	    }
	    
	}
	$w->close; 
#	if($anti_alias > 1) {
#	    $im = rim($framename);
#	    $im = $im->match([(pdl($im->dims)/$anti_alias)->short->list],{method=>'h'});
#	    wim($im,$framename);
#	}
    } # frame loop
}
