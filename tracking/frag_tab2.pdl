=head2 frag_tab2
=for ref

Tabulate fragments in an associated set of frames

=for usage

$tabs = frag_tab2(\@frag_id_list,\@images,{options});

The output is a hash ref containing both 'frame' and 'frag' indexed
data structures.

The 'frame' data structure is a perl list by frame.  Each list element
is a hash ref containing:

=over 3

=item map

The frag_assoc map for this frame

=item event

A perl list of event hashes, describing the events that happen BEFORE the 
frame.

=item frag

A perl list of frag hashes.  The frag hashes contain centroid, size, and flux fields.

=back

=cut

sub frag_tab2 {
  my($opt,$id_list,$im_list) = find_opt(@_);
  local($_);

  ##############################
  ## Set up options
  
  ##############################
  ## First pass:  generate the per-frame list
  my($frames) = [];
  my($i);

  print "setup..." if($opt->{DEBUG});
  my($first) = $id_list->[0];
  my($xcoords) = xvals($first)->flat;
  my($ycoords) = yvals($first)->flat;
  print "...ok\n" if($opt->{DEBUG});
  
  ##############################
  # Pass #1 through frames: summarize by frame
  
  for $i(0..$#{$id_list}) {
    print "frame $i: " if($opt->{DEBUG});

    $frames->[$i] = {};
    my($f) = $frames->[$i];
    
    my($map) = $id_list->[$i]->long;
    my($im) = $im_list->[$i];
    if($map->nelem != $xcoords->nelem) {
      croak "frag_tabulate: Image $i isn't the right size!\n";
    }

    my($frag_ids) = $frames->[$i]->{frag_ids} = [$map->uniq->list];
    print "found ",$#{$frag_ids}," fragments..." if($opt->{DEBUG});
    
    
    ##############################
    # Loop over fragments, tabulating size and intersections
    
    my($frag);
    for $frag(@{$frag_ids}) {
      next if $frag==0;
      
      print " $frag" if($opt->{DEBUG}>1);
      
      my($ff) = ($frames->[$i]->{frags}->{$frag} = {});
      
      ##########
      ## Calculate and store locus, centroid, flux, and size.
      ##
      my($locx,$locy,$strength) = where($xcoords,$ycoords,$im->flat
					,$map==$frag);
      
      printf ":%d",$#{$locx} if($opt->{DEBUG}>1);
      
      my($locus) = ($locx + $locy * $im->dim(0));
      
      $ff->{xlocus} = [$locx->list];
      $ff->{ylocus} = [$locy->list];
      $ff->{centroid} = 
	[(sumover( $ff->{xylocus} * $strength) / sum($strength))->list];
      
      $ff->{locus} = [$locus->list];
      $ff->{strength} = $strength->at(0);
      $ff->{flux} = sum($strength);
      $ff->{size} = $locus->nelem;
    } # end of fragment loop
    
    print "ok\t" if($opt->{DEBUG});
  } # end of frame loop
  
  ##############################
  # Pass #2 through frames: summarize
  # by fragment (doesn't require another pass through the images)
  my($f);
  my($frags) = [];

  for $i(0..$#{$id_list}) {
    print "p2, f$i...\n" if($opt->{DEBUG});

    for $f(@{$frames->[$i]->{frag_ids}}) {
      my($ff) = $frags->[$f];
      
      if( (defined $ff->{finish}) && ($ff->{finish} < $i-1  || $ff->{finish} > $i)) {
	$main::frag_tabulate_aborted = {'frames'=>$frames,'frags'=>$frags};
	croak('Noncontiguous fragment! Aborted data structure in "$frag_tabulate_aborted".');
      }

      $ff->{range}->[0] = $i if(!defined $ff->{range}->[0]);
      $ff->{range}->[1] = $i;
      
      my($fff) = $frames->[$i]->{frags}->{$f};
      my($s) = $fff->{size};
      $ff->{volume} += $s;
      $ff->{max_area} = $s 
	if($s > $f->{max_area});
      
      push(@{$ff->{flux}} , $fff->{flux} );
      $ff->{max_flux} = $fff->{flux} 
         if(abs($fff->{flux}) > abs($ff->{max_flux}));

      push(@{$ff->{locus}},$fff->{locus});
      push(@{$ff->{xylocus}},$fff->{xylocus});
      push(@{$ff->{centroid}},$fff->{centroid});
      push(@{$ff->{size}},$fff->{size});

      $frags->[$f] = $ff;

    }
  }
  return {'frames'=>$frames,'frags'=>$frags};
}
