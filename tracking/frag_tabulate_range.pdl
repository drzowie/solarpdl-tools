=pod

=head2 frag_tabulate

=for ref

Tabulate features in an associated set of frames

=for usage

$tabs = frag_tabulate(\@frag_id_list,\@images,{options});

The output is a hash ref containing a large pdl and several perl
variables about the data set.  The 'summary' field is a pdl indexed by
(feature, frame, data type) and contains the flux, size, and centroid
x and y of each feature in each frame, in that order.  

The IDs get crunched down to a set of consecutive integers.  The
assoc files can be changed in place (see option 'tab'), so if the thing 
crashes you have to remake them, but at least it reduces the egregiousness 
of the disk waste.

OPTIONS

=over 3

=item v_min (default 8)

A feature with a total volume (total number of pixels in the x-y-t sense) 
smaller than this value will get filtered as noise.

=item t_min (default 4)

A feature with a lifetime (in frames) smaller than this value will get 
filtered as noise.

=item sz_min (default 4)

A feature with a maximum size smaller than this value will get filtered as 
noise.

=item tab

Set this option to an array ref or DiskCache object to prevent the assoc 
files from being changed in place.

=item verbose

Chat.

=item DEBUG

Sets verbose option to 2.

=back

BUGS

None at this time (12/31/2007).

HISTORY

Craig DeForest ??? wrote most of it.

Derek Lamb 15-Nov-2004 added reassociation to fix the swiss cheese problem.

Derek Lamb 02-Jun-2005 added documentation.

Derek Lamb 09-Dec-2007 replaced reassociation with the simpler "any
contacts?" check on the filtering.

=cut

use strict;
use PDL;
use PDL::NiceSlice;
use PDL::ImageND;

sub frag_tabulate_range {
    my($opt,$id_list,$im_list) = find_opt(@_);
    local($_);
    
    ##############################
    ## Set up options
    $opt->{v_min} = 8         unless(defined $opt->{v_min});
    $opt->{t_min} = 4         unless(defined $opt->{t_min});
    $opt->{sz_min}= 4         unless(defined $opt->{sz_min});
    $opt->{tab} = $id_list    unless(defined $opt->{tab}); 
    #assoc files are set to change in place unless {tab} is defined
    
#barf if all filtering options are 0; at least one of them needs to be positive
    barf "frag_tabulate called with all filtering options<=0. Refusing to continue." if ($opt->{v_min}<=0 && $opt->{t_min}<=0 && $opt->{sz_min}<=0);

    $opt->{verbose} = 2 if($opt->{DEBUG});
    
    ##############################
    ## Allocate the features table
    
    my($maxfrag) = $id_list->[-1]->abs->max;  
    print "maxfrag is $maxfrag\n";
    print "Allocating ".join("x",$maxfrag+1,scalar(@{$id_list}),4)." floats (".($maxfrag+1)*(scalar(@{$id_list})*4*4/1024/1024)," MB)\n";
    my($summary) = zeroes(float,$maxfrag+1,scalar(@{$id_list}),4);
##summary is indexed by (feature number, frame number, (flux, size, centroid x, centroid y)) 
   
    ##############################
    ## Ancillary indices for locus calculation
    my($xcoord) = xvals(abs($id_list->[-1])) ->flat;
    my($ycoord) = yvals(abs($id_list->[-1])) ->flat;
    my($icoord) = xvals(abs($id_list->[-1])->flat);
    my($loci)= [];
    
    ##############################
    ## Loop over frames and accumulate data.

    for my $fr(0..$#{$id_list}){
	next unless (defined($im_list->[$fr]) && defined($id_list->[$fr]));
	
	print "(1) summarizing f$fr: \n" if($opt->{verbose});
	
	# Retrieve current images & find list of current features
	my($idmap) = abs($id_list->[$fr]);
	my($im) = $im_list->[$fr];
	my($ids) = $idmap->flat->long->uniq;
	
	print $ids->nelem," frags" if($opt->{verbose});
	
	my($floci) = {}; 
	
	# Loop over current features
	my($id);    
	my($n);
	
	my($idml) = $idmap->long;
	my $id_fxy = whichND($idmap != 0);
	my $id_f = $idmap->indexND($id_fxy)->sever;	

	for $id($ids->list) {
	    next unless $id;  # Skip the null case

   	    # Retrieve loci and cache them for later use.
	    my $xy = $id_fxy->(:,which($id_f==$id));  # 2 x N for feature
	    $floci->{$id} = $xy;

##	    my($xl,$yl,$il,$val) = where($xcoord, $ycoord, $icoord, $im->flat, $idmap->flat->long == $id);

	    my($val) = $im->indexND($xy);
	    my($flux)     = $val->sumover;
	    my($size)     = $xy->dim(1);
	    my($centroid) = sumover($xy->mv(1,0) * $val) / $flux;
	    
##put in a check: if id is bigger than maxfrag, then we need to append a slice to summary. This is an issue if the largest id number in the data set isn't alive in the last frame (i.e., very rarely).

	    $summary=$summary->append(zeroes(1,scalar(@{$id_list}),4)) if ($id>$maxfrag);
	    $summary->(($id),($fr),:) .= $flux->append($size)->append($centroid);
	    
	    print "$fr,$id: ",$summary->(($id),($fr),:),", ",$flux->append($size)->append($centroid),"\n"
		if($opt->{verbose}>2);
	    print "." if($opt->{verbose} && (($n++ % 10 == 0) || $opt->{verbose}>1));
	    
	}
##end loop over ids in a frame 
=pod
=begin comment
 Cache locus information for later.  This deserves a little more explanation: 
$loci is an array (indexed by frame) whose elements are hashes.  The keys of 
the hash are the unique ids in that frame, and the values are the flattened 
image pixel numbers that contain the id for that frame.  So to get all the 
pixels that have id of 16 in frame 10, one would say $loci->[10]->{16}.  
Remember that while the frames are continuously indexed (0,1,2,3,...), the 
hash keys for a given frame won't be: {0,4,5,8,9,13,...}
=end comment
=cut

	$loci->[$fr] = $floci;
	
	print "\n" if($opt->{verbose});
    }
##end loop over frames    
    
    ##############################
    ## Filter on volume and other criteria, and crunch IDs.

    print "Filtering features: volume..." if($opt->{verbose});
    my($frag_ok) = ($summary->(:,:,(1))->xchg(0,1)->sumover >= $opt->{v_min});
    
    print "time..." if($opt->{verbose});
    $frag_ok &= (($summary->(:,:,(1))->xchg(0,1) != 0)->sumover) >= $opt->{t_min};
    
    print "size..." if($opt->{verbose});
    $frag_ok &= ($summary->(:,:,(1))->xchg(0,1)->maximum >= $opt->{sz_min});
    
    print "ok\n" if($opt->{verbose});

=pod

if (a feature is filtered){
    if (feature is touching another feature in space or time){
    keep feature
    }
    else{
    kill feature
    }
}

=cut

##note that anything based on which($frag_ok) is only going to have positive ID numbers!
    my $filt_ids = which(!$frag_ok);
########################
#shortcut: if there's no filtering, we can just write out the images and return
    if ($filt_ids->nelem == 1 && $filt_ids->at(0)==0){
	print "shortcutting..." if $opt->{verbose}>1;	
	for my $fr(0..$#{$im_list}) {
	    $opt->{tab}->[$fr] = $id_list->[$fr]->abs;
	}
	print "frag_tabulate completed successfully.";
	return $summary;
    }
#end shortcut
########################

#    my($ok_ids) = which ($frag_ok); #with no reassociation, don't need to make this until later
    
    my $k = ones(3,3);
    my $xsize=$id_list->[0]->dim(0);
  FilteredFeature:    foreach my $feat($filt_ids->list){
      next FilteredFeature if ($feat==0);
      my $frames = which($summary(($feat),:,(1)));
      my $ft_sgn = $summary(($feat),($frames->at(0)),(0)) <=> 0;
      my $start = $frames->at(0)?$frames->at(0)-1:0;
      my $end = $frames->at(-1)<$summary->dim(1)-1?$frames->at(-1)+1:$summary->dim(1)-1;
      print "Feature $feat lives in frames $frames, also checking $start and $end\n" if ($opt->{verbose}>1);
      
=pod
###check before
      if (($frames->at(0)) &&
	  ($id_list->[$frames->at(0)-1]->where($id_list->[$frames->at(0)]->abs==$feat)->any))
      {
	  $frag_ok(($feat)).=1;
	  next FilteredFeature;
      }
      
###check after
      if (($frames->at(-1)<$summary->dim(1)-1) &&
	  ($id_list->[$frames->at(-1)+1]->where($id_list->[$frames->at(-1)]->abs==$feat)->any))
      {
	  $frag_ok(($feat)).=1;
	  next FilteredFeature;
      }
=cut
      
###check around
      foreach my $fr($frames->list){
	  my ($xmin,$xmax)=minmax($loci->[$fr]->{$feat}->((0)));
	  my ($ymin,$ymax)=minmax($loci->[$fr]->{$feat}->((1)));
	  
	  my $sub_idlist = $id_list->[$fr]->range(pdl($xmin,$ymin)-2,pdl($xmax-$xmin,$ymax-$ymin)+4,'t');
	  my $dilated = convolveND($sub_idlist == $feat * $ft_sgn, $k)>0;

	  my $localids = $sub_idlist->where($dilated)->uniq;

#localids should at least have $feat in it, and we don't care about 0.
	  if((($localids != $feat*$ft_sgn) & ($localids!=0))->any){
	      $frag_ok(($feat)).=1;
	      next FilteredFeature;
	  }
      }
  }
    
##need to remake this because we might have re-ok'd some features
    my $ok_ids = which($frag_ok);

    # Generate forward and backward conversions for IDs.  The +1s are to 
    # make the new IDs start at 1 not 0.
    my($a,$id_conv);
    for $a(0..$ok_ids->nelem-1) {
	$id_conv->{$ok_ids->at($a)} = $a+1;
    }
    
    print "id_conv is:";
    for my $idc(sort keys %$id_conv) {
	print $idc."=>".$id_conv->{$idc}.";  ";
    }

    # Compress all the IDs in the images.
    for my $fr(0..$#{$im_list}) {
	print "(2) crunching f$fr: " if($opt->{verbose});
	my $idmap = zeroes(abs($id_list->[0]));
	my $floci = $loci->[$fr];
	
	print scalar(keys %{$floci})," ids, of which ",sum($frag_ok->(pdl(keys %{$floci})))," are OK " if($opt->{verbose});
	
	my($n) = 0;
	for my $old_id(keys %{$floci}) {
	    next unless $id_conv->{$old_id};
	    my $idw = $idmap->whichND($floci->{$old_id});
	    $idw .= $id_conv->{$old_id};
	    print "." if($opt->{verbose} && (($n++ % 10 == 0) || $opt->{verbose}>1));
	}
	
	$opt->{tab}->[$fr] = $idmap;
	print "\n" if($opt->{verbose});
    }
    print "Copying summary...\n";
    my($sum2) = $summary->(append(pdl(0),$ok_ids),:,:)->copy;
    print "cleaning up...\n";
    undef $summary;
    print "frag_tabulate completed successfully.\n";
    return $sum2;
}
