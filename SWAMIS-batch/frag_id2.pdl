=head2 frag_id
=for ref

Identify magnetic features from a sequence of masks and original data. 

=for usage

$ids = frag_id(\@image_list,\@mask_list,{options})

The image_list is a perl list of 2-D pdls containing images to 
scan.  The mask_list is a similar list containing above-threshold regions
in the images (use frag_detect to get hysteresis in the scan!).  If
the images contain both positive and negative features, then the feature
masks should have sign bits that correspond to the features' signs.

The output is an array of masks with per-image unique fragment ids.
The fragment ids are not guaranteed to be consecutive, only unique. 
Negative fragments get negative ids; positive fragments get positive ids.

IDs start at +/- 2 and count away from zero.

=for options

=over 3

=item method

Technique for identification of individual fragments.  "downhill" finds
centroided maxima; "clump" finds continuous collections of pixels.
(default is "downhill"; "clump" yields Parnell-compatible fragments).

=item diag

Nonzero if diagonals are considered neighbors.  

=item ids

This is an array ref for passing in an array to take the ID'ed image planes.
Helpful if you want to store 'em in a DiskCache object.

=back

=for bugs

None (of course)

=for history

Craig DeForest, 16-Nov-2001.  Based on code and algorithms developed by 
Parnell and by Hagenaar.
Derek Lamb, 24-Jul-2003. Updated display commands for OO.
Craig DeForest, 18-May-2004: modified to use range() instead of slicing.

=for license

This program is copyright (c) 2001, Southwest Research Institute.  You
may use, modify, and distribute it under the same terms as Perl itself
(the "Perl Artistic License") or the Gnu GPL version 2 or higher, by
your choice.  You should have received copies of both those licenses
with your Perl/PDL distribution; for a copy, contact
"deforest@boulder.swri.edu".  The author information must remain
intact.

=cut
  use Carp;
  use PDL::Graphics::PGPLOT::Window;
sub frag_id2 {
  my($opt, $images, $masks) = find_opt(@_);
  local($_);

  ##############################
  ## Set up options

  my($id_out)= (defined $opt->{ids}) ? $opt->{ids} : [];

  my($method) = 1;
  if($opt->{method}) {
    if($opt->{method} =~ m/hill/) {
      $method = 2;
    } elsif($opt->{method} =~ /clump/) {
      $method = 1;
    } else {
      croak "frag_id: method option should be 'downhill' or 'clump'.\n";
    }
  }


  print "Method is $method...\n" if($opt->{verbose});

  ##############################
  # Main loop
  my($frame);
  for $frame(0..$#$masks) {
    print "Frame $frame of $#$masks...\n";
    my($m) = $masks->[$frame];
    my($mpos,$mneg) = (($m>0), ($m<0));
    if(!defined($m)) {
      print "Frame No.",$frame," undefined.  Skipping...\n";
      next;
    }

    print ("Frame $frame: ",$mpos->sum," pos. and ",$mneg->sum,
	   " neg. pixels in mask..\n") if($opt->{verbose});

    my($im) = $images->[$frame];
    my($w,$h) = $im->dims;   # Width and height of masks


    my($ids) = zeroes($im);
    my($newa)=zeroes($im);

    my($max) = $m->copy;

    ### Maxima-finding: cheesily memory-intensive but oh-so-sweet.
    ### $maxima gets a list of locations of local maxima -- but only inside
    ### identified concentrations. 
    my($offsets) = ndcoords(3,3)-1;
    $imlags = ($im*$m)->range($offsets,[$w,$h],'t')->clump(2);
    $maxima = whichND($m & ($imlags->((4)) == $imlags->maximum));

    ##########
    # Assign local concentration numbers to each of the maxima.
    # Start the concentration numbers at 1, and assign signs
    # according to concentration sign.
    $ids->range($maxima,0) .= (1 + xvals($maxima->((0)))) * $m->range($maxima,0);

    next unless $maxima->nelem;
    ##########
    # Central loop: walk in each of the possible directions and associate
    # pixels to prior maxima.  Treat collisions differently between the 
    # "downhill" and "clump" methods:  clumping causes concentrations to
    # become grouped when they collide, while downhill motion causes them
    # to stop at the border.  The border pixel goes to whomever gets there
    # first (for now).

    my($locus) = $maxima;
    my(@offsets) = (pdl([[0,1]]),pdl([[0,-1]]),pdl([[1,0]]),pdl([[-1,0]]));
    push(@offsets,(pdl([[1,1]]),pdl([[1,-1]]),pdl([[-1,1]]),pdl([[-1,-1]])))
      if($opt->{diag});
    my($offsets) = zeroes(1,1)->glue(1,@offsets);

    my($change_i);
    do { 
      my ($newlocus) = $locus;

      # Cheesy and slow -- this is likely a bottleneck.
      # Assemble the list of points to consider for mappage.

      map { $newlocus = $newlocus->glue(1,$locus + $_) } @offsets;
      $locus = $newlocus->uniqvec;

      # Trim the list to only include points that are inside masked regions
      my($mpoints) = $m->range($locus,0,'t');
      my($ok) = which($mpoints);
      $locus = $locus->xchg(0,1)->($ok)->xchg(0,1)->sever;

      print ("Locus is ".(join("x",$locus->dims))."...\n") if($opt->{verbose});

      # Now gather the points into a nice collection.   The central point is
      # listed first, followed by the others in its neighborhood.
      $r1 = $ids->range($locus-1,3,'t');
      $idpoints = $ids->range($locus-1,3,'t')->mv(0,2)->range($offsets+1)->sever;
      $impoints = ($im)->range($locus-1,3,'t')->mv(0,2)->range($offsets+1)->sever;
      $mpoints = $m->range($locus-1,3,'t')->mv(0,2)->range($offsets+1)->sever;

      if($opt->{monitor}) {print "-"; $newa .= 0; print "-";}

      my($consider);

      if($method == 1) {
	print "n" if($opt->{verbose});
	$consider = ($mpoints == $mpoints->(0));
      } elsif($method==2) {
	$consider = ( $mpoints == $mpoints->(0) &
		      $impoints*$mpoints <= $impoints->(0)*$mpoints->(0) );
      }
      print "\n consider: $consider\n" if($opt->{verbose}>1);
      my($gotcha) = ($consider &
		     ( (!$idpoints(0)) | ($idpoints > $idpoints->(0)) )
		     );
      ## Now $gotcha has 0 in most elements and 1 for all points
      ## that might be able to flow their results into the central pixel.
      ## Now identify which central pixels are getting modified.
      ## $change_i gets the index of pixels that are gonna change.

      $change_i = ($gotcha->(1:-1)->orover & $gotcha->((0)) )->which;
      print ("change_i has ".($change_i->nelem)." elements...\n") if($opt->{verbose});

      if($change_i->nelem) {
	my($newid) = ( ($idpoints->(1:-1)*$mpoints->(1:-1))->maximum * 
		       $mpoints((0)))    -> ($change_i);

	$ids->range($locus)->($change_i) .= $newid;

	$locus = $locus->xchg(0,1)->($change_i)->xchg(0,1);
	print "new locus is ".join("x",$locus->dims)."\n\n" if($opt->{verbose});
      }

      $win->imag($ids) if($opt->{monitor});
      $win->hold if($opt->{monitor});

    } until ($change_i->nelem == 0);
    
    $id_out->[$frame] = $ids;
  }
  $win->release if($opt->{monitor});
  $win->close if($opt->{monitor});
  print "frag_id completed sucessfully.\n";
  return $id_out;
}
