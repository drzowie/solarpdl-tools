use PDL::NiceSlice;
use Date::Parse;
use Date::Format;
use Time::HiRes qw/usleep/;

sub read_locations {
    
    open FOO,"<locations-new";
    
    $info = {};

    while(<FOO>) {
	($anum, $aname, $suff, $elat, $elon, $Dlat, $Dlon, $rho) = split m/\,/;
	next if($anum =~ m/[a-z]/i);

	if($anum) {
	    $num = $anum;
	    $name = $aname;
	}

	$info->{$name}->{$suff||"-"} = {lon=>$elon, lat=>$elat, Dlon=>$Dlon, rho=>$rho};
    }

    return $info;
}

sub read_heights {
    open FOO,"<height-time-new";
    $ht = {};
    while(<FOO>) {
	next if( m/^\,\,\,/);
	next unless(m/\,/);

	($anum, $aname, $jday, $ppdist) = split m/\,/;
	if($anum) {
	    $num = $anum;
	    $name = $aname;
	}

	if($jday==0){ print "Hey! jday is 0! line was '$_'\n"}
	chomp;
	print "line is '$_'\n";
	if($name eq ''){
	    die "HEY! name is blank -- line was $_\n";
	}

	$ht->{$name} = [] unless exists($ht->{$name});
	# truncate jday info to 1/1000 day...
	push(@{$ht->{$name}}, [0+int(1000*$jday+0.5)/1000, $elongation, $ppdist]);
    }

    for $k(keys %$ht) {
	$ht->{$k} = pdl($ht->{$k});
    }
    print "returning ht. keys are: '".join("','",sort keys %$ht)."'\n";
    return $ht;
}

sub frobnicate_times {
    $ranges = {};
    for $k(sort keys %$ht) {
	$start = $ht->{$k}->((0),(0));
	$end = $ht->{$k}->((0),(-1));
	printf("%s: %.2f days [jdays %.2f - %.2f]\n",$k, ($end-$start),$start,$end);
	$ranges->{$k} = [$start,$end];
    }
}

# Accept a PGPLOT window object, env it and set it up for plotting


$t = !t_radial() x t_linear(scale=>[-3.14159/180,1],post=>[3.14159/2,0]);;


sub setup_window {
    my $w = shift;
    my $options = shift;
    my $date = shift;
    my $cart_range = shift;
    $rs = 0.0046491; # solar radius in A.U.
    $cart_range = [-0.7,0.7,-1.1,$rs] unless defined($cart_range);
    my %opt;
    
    $opt{AXIS} = "BC";
    $opt{JUSTIFY} = 1;

    for $k(keys %$options) {
	$opt{$k} = $options->{$k};
    }

    $w->env(@$cart_range,\%opt);
    
    my $ang = xvals(5 * 360 + 1) / 5 / 360 * 3.1415926 * 2;
    my $x = cos($ang);
    my $y = sin($ang);
    
    $w->hold;
    my $r;
    for($r=0.2;$r<=1.2;$r+=0.2) {
	$w->line($r * $x, $r * $y, {linestyle=>2,color=>3});
	if($r<1.1){$w->text(sprintf("%.1f A.U.",$r), -0.25*$r, -$r*0.95,{color=>3,charsize=>0.75});}
    }
    $w->circle( 0, 0, $rs, {color=>7});
    $w->text("Sun",0,-0.04,{justification=>0.5,color=>7});
    $w->circle( 0, -1, $rs, {color=>5});
    $w->text("Earth",0,-0.99,{justification=>0.5,color=>5});

    my $sutime = str2time('2008-12-08T00:00');
    my $eutime = str2time('2009-01-15T00:00');

    my $alpha = ($date-$sutime) / ($eutime - $sutime);

    my $a = pdl(1-$alpha,$alpha);

    $blocs = pdl([-44.06,1.04],[-46.67,1.02]);
    $alocs = pdl([ 42.22,0.97],[ 42.80,0.97]);

    $aloc = ($alocs->mv(1,0) * $a)->sumover;
    $bloc = ($blocs->mv(1,0) * $a)->sumover;

    $ap = $aloc->apply($t);
    $bp = $bloc->apply($t);
    
    # Stereo-B lon = -44.06, 1.04 A.U. at 8-Dec start; = -46.67, 1.02 at 15-Jan-2009
    # Stereo-A lon = +42.22, 0.97 A.U. at 8-Dec start; =  42.80, 0.97 at 15-Jan-2009
    $w->circle($ap->((0)),$ap->((1)),$rs,{color=>6});
    $w->text("A",$ap->((0))+$rs,$ap->((1))+$rs,{color=>6});
    $w->circle($bp->((0)),$bp->((1)),$rs,{color=>6});
    $w->text("B",$bp->((0))+$rs,$bp->((1))+$rs,{color=>6});

    # FOV...
    # cor-1: 0.64 deg -> 1.3 deg
    # cor-2: 0.8 deg -> 4.0 deg
    
    # Draw FOVs
    $asub = sub {
	my $angle = shift;
	my $origin = shift;
	my $color = shift;

	my $sun_ang = atan2($origin->((1)),$origin->((0)));

	$p = $origin + (  pdl([$angle,0],[$angle,1])->apply(!t_radial() x t_linear(post=>[3.14159 - $sun_ang,0],scale=>[3.14159/180,2])) );
	$w->line($p->((0)),$p->((1)),{linestyle=>3,color=>$color});
    };

    &$asub( 4.0,$ap,4);
    &$asub(-4.0,$ap,4);

    &$asub(-4.0,$bp,4);
    &$asub(4.0,$bp,4);

    &$asub(-18,$ap,2);
    &$asub(-90,$ap,2);
	
	    
}

$info = read_locations();
$ht = read_heights();
frobnicate_times();


@stimes = map { $ranges->{$_}->[0] } sort keys %$ranges;
@etimes = map { $ranges->{$_}->[1] } sort keys %$ranges;

$start = pdl(@stimes)->minimum->floor;
$end = pdl(@etimes)->maximum->ceil;

printf("\nmovie: start is jday %.2f; end is jday %.2f\n",$start, $end);

$cadence = 15 / 60 / 24; # cadence in days

$frame = 0;


$jday_epoch = 2454801.5; # 0 UTC Dec 1 2008
$date_epoch = str2time('2008-12-01T00:00:01.00');

$fcount = ($end - $start) / $cadence;

for($jday = $start; $jday <= $end; $jday += $cadence) {

    printf "frame %d of %d (%.1f%% finished)\n",$frame,$fcount,($frame/$fcount)*100;
    $w=pgwin(dev=>sprintf("frames/frame-%4.4d.ppm/ppm",$frame++),size=>[9,6]);

    $utime = $date_epoch + (24*3600)*($jday - $jday_epoch);
    $datestr = time2str("%Y %h %d %H:%M",$utime);
    
    setup_window($w,{title=>"Overhead feature map: $datestr"},$utime);
    $w->hold;

    for $k(keys %$ranges) {
	if($ranges->{$k}->[0] <= $jday && $ranges->{$k}->[1] >= $jday) {
	    $vals = ($ht->{$k}->((0)));
	    $dex = (($vals<=$jday))->which->max;
	    if($dex >= $vals->dim(0)-1) {
		$valrow = $ht->{$k}->(:,($dex));
	    } else {
		$alpha = ($jday - $ht->{$k}->((0),$dex)) / ($ht->{$k}->((0),$dex+1) - $ht->{$k}->((0),$dex));
		$valrow = $ht->{$k}->(:,($dex+1)) * $alpha   +   $ht->{$k}->(:,($dex)) * (1-$alpha);
	    }

	    #order is tcb
	    for $kk(sort keys %{$info->{$k}}) {
		unless($kk eq 'm') {
		    $pp = pdl( $info->{$k}->{$kk}->{lon}, $valrow->((2)) );
		    $p = $pp->apply($t);
		    print "$k$kk: pp=$pp; p=$p\n";
		    $w->points($p->((0)),$p->((1)),{symbol=>3});
		    #$w->text($k,  $p->((0))+$rs, $p->((1))+$rs )  if($kk =~ m/[\-b]/);
		}
		else {
		    # TH model data - render the curved edge
		    $Dlon = $info->{$k}->{$kk}->{Dlon};
		    $theta = (xvals(201)-100)/100 * $Dlon;
		    $rp  = 1 - ($info->{$k}->{$kk}->{rho} * (1/cos($theta*3.14159/180) - 1));
		    print "rho = $info->{$k}->{$kk}->{rho}; valrow=$valrow; dex=$dex\n";
		    $rp *= $valrow->((2));
		    $theta += $info->{$k}->{$kk}->{lon};
		    $pp = pdl($theta,$rp)->mv(-1,0);
		    $p = $pp->apply($t);
		    print "M: ($k) pp midpoint is".($pp->(:,($pp->dim(1)/2)))."; p midpoint is ".($p->(:,($p->dim(1)/2)))."\n";

		    $w->line($p->((0)),$p->((1)),{color=>7});
		}
	    }
	    if( exists($info->{$k}->{t}) && exists($info->{$k}->{c}) && exists($info->{$k}->{b})) {
		$pp = pdl( map { [ $info->{$k}->{$_}->{lon}, $valrow->((2)) ] } ('t','c','b') );
		$dex = $pp->((0))->qsorti;
		$p = $pp->(:,$dex)->apply($t);
		$w->line($p->((0)), $p->((1)));
	    }

	    # distortion parameter
	    # 0 - circle
	    # -1 -- perfectly straight
	    # <-1 -- concave out
	    # 1 - rounder
	    # equation: r = rcent * (1 - \rho (1/cos(psi) - 1))

	}
    }
    $w->close;

}

	
