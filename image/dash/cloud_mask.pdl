=head2 cloud_mask

=for ref

Given a DASH image, generate a cloud mask by finding regions with no
stars in them, and regions of intermediate scale (larger than stars,
smaller than the whole screen) with extra diffuse brightness.

OPTIONS:

=over 3

=item shw

(default is 1) - half-width at half-max of the smoothing kernel to apply to reduce noise

=item minismooth

(default is [11,2]) parameters to send to minismooth to generate the starfield background.
Set to 0 to not minismooth.

=item star_thresh

(default is 50)

=back

=cut

use PDL::Options;
use strict;

sub cloud_mask {
    my $im_in = shift;
    my $u_opt = shift // {};

    my %opt = parse( {
	minismooth => [ 55, 20 ],
	shw => 1,
	star_thresh => 100,
	dist_thresh => 100,
	margin => 0,
		     },
		     $u_opt);
    my $opt = \%opt;

    ##############################
    # Minismooth to extract the stars.  Smooth the background kernel by the kernel size, to overcome jumps.
    my $im;
    my $bkg;
    if( $opt->{minismooth} ) {
	$bkg = float(minismooth($im_in, @{$opt->{minismooth}}));
	$im = $im_in - $bkg;
    } else {
	$im = float $im_in->copy;
    }

    ##############################
    # Threshold the minismoothed image to get a star mask
    my $mask = ($im >= $opt->{star_thresh});
    $mask = ($mask->convolveND(ones(3,3))>4);  # remove spurious single pixels

    # Limit stellar detections to local maxima -- this should greatly reduce the point count.
    $mask = ($mask & ($im == $im->range(ndcoords(3,3)-1,[$im->dims],'e')->maximum->maximum));

    my $dist = distance_from_mask($mask,{max=>$opt->{dist_thresh}+1});
    my $dist_mask = ($dist > $opt->{dist_thresh});
    my $dist_mask_edges = $dist_mask & ( $dist_mask->range(ndcoords(3,3)-1, [$dist_mask->dims], 't')->sumover->sumover < 9 );
    my $dist_mask_dist = distance_from_mask($dist_mask_edges, {max=>$opt->{dist_thresh}+1});
    my $cloud_mask = ($dist_mask | ($dist_mask_dist <= $opt->{dist_thresh}));

    ##############################
    # Now find bright areas...
    # (hardwired for now)

    my $imbk = minismooth($im_in->float, 151,0.01*(151*151));

    my $bks = minismooth(($im_in - $imbk), 21, 0.01*(21*21));


    my $bright_mask = $bks > ($bks->abs->median * 10);

    my $bright_mask_edges = $bright_mask & ($bright_mask->range(ndcoords(3,3)-1,[$bright_mask->dims],'t')->sumover->sumover < 9);
    $bright_mask = $bright_mask | (distance_from_mask($bright_mask_edges, {max=>$opt->{dist_thresh}+1}) < $opt->{dist_thresh});

    $cloud_mask->where($bright_mask) .= 1;

    if($opt->{margin}) {
	my $cloud_mask_edges = $cloud_mask & ( $cloud_mask->range(ndcoords(3,3)-1, [$cloud_mask->dims], 't')->sumover->sumover < 9 );
	my $cloud_mask_dist = distance_from_mask($cloud_mask_edges, {max=>$opt->{margin}+1});
	$cloud_mask = ($cloud_mask | ($cloud_mask_dist <= $opt->{margin}));
    }

    return $cloud_mask;
}

