=head2 spikejones - despike using spatial information

=for usage

$im = spikejones($im, $opt);
spikejones($im->inplace, $opt);

=for ref 

spikejones is a simple single-image despiker, along the lines of all
the other despikers out there.  It unsharp-masks the image and sets
spiky values to be equal to the average of local non-spike pixels.  If
you have an image sequence that adequately samples the underlying
evolution, consider using zspike() instead, as that uses more robust
temporal information rather than just spatial information.

The default works OK for TRACE EUV images with small to moderate
amounts of spike.  

It works by comparing an unsharp-masked copy of the image to a 
smoothed copy of the image.  You can adjust the size of the 
unsharp-masking kernel, the smoothing kernel, and the required
ratio to identify a spike.

Options are:

=over 3

=item siz (default 3)

The size of the margin around the central pixel, for the unsharp mask
convolution kernel. 

=item smsiz (default siz*2 + 1)

The size of the smoothing kernel used to smooth the image for intensity
comparison with the unsharp masked image.

=item alpha (default 1)

The height in the unsharp-masked image, above which a pixel is
considered a spike (normalized to the smoothed image -- ie a n
unsharp-masked pixel, by default, must be above the smsiz x smsiz
pixel average brigtness in the neighborhood, to be considered a spike.
Lower values are more sensitive, higher values are more tolerant.

=item dilation (default 0)

Number of pixels by which to dilate the spike mask in all directions

=back


=cut
use strict;

use PDL::NiceSlice;
use PDL::Options;

sub spikejones {
    my $im = double  shift;
    my $u_opt = shift || {};
    my %opt = parse( {
	size   => 3,
	smsize => undef,
	alpha  => 1,
	dilation => 0,
	med => 1,
		     }, $u_opt
	);
    my $opt = \%opt;

    die "spikejones requires a PDL" unless (UNIVERSAL::isa($im,'PDL'));
    my $a = $im->new_or_inplace;
        
    ##############################
    # Pick a size -- default is three pixels around the central one (7x7 kernel)
    my $size = $opt->{size};
    $size = pdl($size)->flat->at(0); # ensure a Perl scalar...
    $size *= 2;
    $size += 1;

    ##############################
    # Pick a smoothing size -- default is twice $siz.
    my $smsiz = $opt->{smsize} // $size*2+1;
    $smsiz = pdl($smsiz)->flat->at(0);
    my $smk = rvals($smsiz,$smsiz) <= $smsiz/2;

    ##############################
    # Normalize the value of the image to its smoothed value in the larger neighborhood.
    my $az;
    unless($opt->{med}) {
	$az = $a / $a->convolveND($smk/$smk->sum,{bound=>'p'});
    } else {
	$az = $a / $a->med2d($smk);
    }

    ##############################
    # Now assemble the kernel for the unsharp masking
    my $am;
    my $thresh = ($opt->{alpha} || 1);
    unless($opt->{med}) {
	my $k = -ones($size,$size)/$size/$size;
	$k->($size/2,$size/2) += 0.75;
	$k->($size/2-1:$size/2+1,$size/2-1:$size/2+1) += 0.25/9;
	
	$am = ($az->convolveND($k) > $thresh);
    } else {
	my $k = (rvals($size,$size)<= $size/2);
	$am = ($az - $az->med2d($k)) > $thresh;
    }
    if($opt->{dilation}) {
	$am .= ($am->convolveND(ones(2*$opt->{dilation}+1,2*$opt->{dilation}+1)) != 0);
    }
    my $spikes = whichND($am);

    my $ar = $a->range($spikes-($size-1)/2,$size,'e');
    my $amr = (!$am)->range($spikes-($size-1)/2,$size,'e');
    my $ac = $a->indexND($spikes);

    if($amr->nelem){
        $ac .= ($ar * $amr)->mv(0,2)->sumover->sumover / $amr->mv(0,2)->sumover->sumover
    }

    # Try to fill in non-finite values( generally clumped stuff )
    $a = $a->setbadif(!isfinite($a));

    for my $i(1..10){
	my $dex = whichND($a->isbad);
	last if($dex->nelem==0);
	my $av = $a->range($dex-2,[5,5],'e');
	$a->indexND($dex) .= $av->clump(1,2)->mv(1,0)->average;
    }

    return $a;
}
