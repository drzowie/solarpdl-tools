=pod

=head2 shutter

=for ref

Provide shutter noise information about a magnetogram sequence

=for usage

($offsets, $sigma) = shutter(@files[,\%opt]);

=for method

Assumes that the center of a magnetogram histogram is approximately
gaussian.  Takes the natural log of the histogram, and fits a parabola
to the core. Returns the value of the center of the parabola fit and
the variance (sigma) of the gaussian. Optionally displays the
histogram and the resulting parabolic fit in log10-space.

For some reason this doesn't produce the same average sigma as
indicated in Hagenaar's thesis. That work showed <sigma> ~ 2.5, here I
get 2.5**2=6.4.  Perhaps there was an extra square root?

OPTIONS

=over 3

=item examine (default 0)

If set to a true value, inspect a plot of the histogram and the
resultant parabolic fit.

=item bfit (default 7) 

The fit is performed over a range in magnetic field from -bfit to
+bfit.

=item bdelta (default 1)

The bin size of the histogram.  The default is fine for resampled or
averaged data, but for discrete data like raw MDI magnetograms, this
should be set to something greater than BSCALE (in the FITS header) to
get around the discretization.

=back

=for Author

Derek Lamb, based on Hagenaar's thesis, pg 128.

=cut

use PDL::Fit::Polynomial;
use strict;

sub shutter{
    my $opt=pop;
    my @in = @_;
    
    #push the last value back if it isn't a (presumably options) hash
    push(@in,$opt) and undef $opt unless UNIVERSAL::isa($opt,'HASH'); 
    
    my $examine = $opt->{examine} || 0;
    my $bfit = $opt->{bfit} || 7;
    my $bdelta = $opt->{bdelta} || 1;
    
    my $bhist = pdl(30,2*$bfit)->max;
    
    my $offsets = zeroes(scalar @in);
    my $sigma = zeroes(scalar @in);
    my $w;
    for my $i(0..scalar @in -1){
	my $image=rfits("$in[$i]");
	my ($b,$n)=hist($image,-$bhist,$bhist,$bdelta);
	my $brange=which($b >= -$bfit & $b <= $bfit);
	
#	my $bfolding =10; #Gauss
#	my $weights=exp(-$b($brange)->abs/$bfolding);
	my $weights=ones($brange);
	
	my ($fit,$coeffs)=fitpoly1d($b($brange),$n($brange)->log,3,{Weights=>$weights});
	$offsets(($i)).=-$coeffs((1))/2/$coeffs((2));
	$sigma(($i)).=sqrt(-0.5/$coeffs((2)) );
	if ($opt->{examine}) {
	    $w=pgwin('xs',size=>7) unless UNIVERSAL::isa($w,'PDL::Graphics::PGPLOT::Window');
	    my $x=$b(1:-2);
	    $w->bin($x,$n(1:-2)->log10,{axis=>'logy',title=>"i=$i. Click to Continue"});
	    $w->hold;
	    my $y=($coeffs((2))*$x*$x + $coeffs((1))*$x + $coeffs((0)))/log(10);
	    $w->line($x,$y,{color=>'red'});
	    $w->release;
	    $w->cursor();
	}
    }
    if(defined $w){
	$w->close;
	undef $w;
    }
    return ($offsets,$sigma);
}
