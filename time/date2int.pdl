=pod

=head2 date2int

=for ref

Convert an ASCII date stamp to a UNIX integer time (UTC).

=for usage

   $date = date2int($datestamp);

You hand in a datestamp string and get back a UNIX integer time.
Timezone names are handled.  If you enter multiple strings, then they are
treated as additional context.  That way, you can enter 
   $a = date2int("Jan 1, 2003",'12:34');
and get something useful out.  You get back undef unless the day and month are
defined after all the strings are processed.

NOTES:

This isn't really PDL; it's pure perl.  But it's handy as an autoload
routine, so here it is.

Fractional seconds are handled by the CDS format
yy[yy]-mm-ddTHH:MM:SS[.frac] only for now.

AUTHOR AND HISTORY:

Craig DeForest.
Original code written in 1997.
Updated for POD documentation, 16-Jun-2004.
Derek Lamb added fractional seconds 28-June-2007

=cut
use strict;
require('timelocal.pl');

######################################################################
# date2int - Interpret a timestamp into an integer number.  For
# now, only deals with UT times.
#
# 2.0 - Yet another date format:  yy[yy]MMMd[d], as in 97may03 or 1997may3.
#       For good measure, also take 03may1997 but not 03may97 (too ambiguous).
#       CED 9-Mar-99
#
# 1.9 - Added yet another time format: (cruft)yyyy.mm.dd_hh:mm[:ss](cruft).
#       (also CDS time format) CED 22-Oct-97
#
# 1.8 - Generalized SOI T_REF style dates to times without seconds;
#       added CDS-style format (yyyy-mm-ddThh:mm:ss.frac)
#       CED 1-Dec-96
#
# 1.7 - Added limited timezone support: 
#       EST,EDT,CST,CDT,MST,MDT,PST,PDT,GMT,UT,JST,JDT,HST
#       All times with a timezone modifier are converted to UT seconds
#       by addition or subtraction of the appropriate number of hours.
#
# 1.6 - Added SOI T_REF style dates:  yy[yy].mm.dd_HH_MM_SS CED 20-Sep-96
#
# 1.5 - Added ECS-style dates: mmm dd hh:mm:ww [TZ] yy[yy] CED 9-Sep-96
#
# 1.4 - Added UNIX-integer dates: [s]sssssssss CED 5-Sep-96
#
# 1.3 - Added Wilcox/Bush-style dates ([yy]yy-mm-dd.
#
# 1.2 - Fixed regexp for SI dates, to allow long month names
#       (eg "6-June-96" is allowed, as well as "6-Jun-96") -- CED
# 1.1 - Fixed the regexp for american dates, to allow not defining
#       a particular year.  (eg "May 14" and "May 14, 1996" are both
#       handled propely now).  --CED
# 
# We understand a variety of timestamps, and allow a context stack
# to be used.  (eg you can supply a number of strings and each
# one is matched against "standard" date and time stamps, in reverse
# order, to provide "default" information for the final one.  So you
# can feed it ("12:34","1 Aug 1996") to get the integer timestamp for
# 12:34 UT, 1-Aug-1996.  
#
# We take a "context" time, too.  If "context" is undefined, is is
# the current time.  If it is defined and zero, we return undefined
# in case of non-parseability.
######################################################################
sub date2int{
  my(@foo) = @_;
  local($_);
  my($year,$mon,$day,$hr,$min,$sec,$frac,$pm,$mname, $century);

  my(@months)=("--","jan","feb","mar","apr","may","jun",
	       "jul","aug","sep","oct","nov","dec");
  my($months)=join('|',@months[1..12]);

########################################
# Zeroth:  Check for already-processed UNIX integer dates, and
# grab a timezone modifier (if needed).
########################################
  $_ = $foo[0];
  return $_ if( m/^\s*\d{9,10}\s*$/ );

  my(%timezones) = ("EST",-5,	"EDT",-4,
		    "CST",-6,	"CDT",-5,
		    "MST",-7,	"MDT",-6,
		    "PST",-8,	"PDT",-7,
		    "GMT",-0,	"GDT",+1,
		    "HST",-10,	"UT",+0,   "UTC",+0,
		    "JST",+9,	"JDT",+10
		    );
  my($tzn) = 0;
  my($tz);
  for $tz(keys %timezones) {
    $tzn = $timezones{$tz} if(m/$tz/i);
  }

  d2isw:while (defined($_ = pop(@foo))) {


##################################################
# First: Integrated timestamp formats 

# MDI SSSDC format:  yy[yy].mm.dd_HH:MM[:SS[_TAI]] or
#                    yy[yy].mm.dd_HH_MM[_SS[_TAI]]
    m/(\d{2,4})\.(\d{2})\.(\d{2})\_(\d{2})[\:\_](\d{2})([\:\_](\d{2}))?/ && do {
      ($year,$mon,$day,$hr,$min,$sec) = ($1,$2,$3,$4,$5,$7);
      next d2isw;
    };

# CDS format:  yy[yy]-mm-ddTHH:MM:SS[.frac]
    m/(\d{2,4})\-(\d{2})\-(\d{2})(T(\d{2})\:(\d{2})(\:(\d{2})\.?(\d*))?)?/ && do {
      ($year,$mon,$day,$hr,$min,$sec,$frac) = ($1,$2,$3,$5,$6,$8,$9);
      next d2isw;
    };

# ECS-style:  mmm dd hh:mm:ss [TZ] yy[yy]
    m/(($months)\w*)\s+(\d{1,2})\s+(\d{1,2})\:(\d{2})\:(\d{2})\s+(\w{3}\s+)?(\d{2,4})/oi && do {
      ($mname,$day,$hr,$min,$sec) = ($1,$3,$4,$5,$6);
      $year = (defined($8))?$8:$7;
      next d2isw;
    };

# [yy]yy[:mm[:dd[:hh[:MM[:ss]]]]]
# This form allows simple 2-digit years, provided that yy>31.  
# with hh:mm:ss times -- we require at least four fields to match
# this case.  We require that yy > 31 
#
    m/(^|\s)(\d{2,4})(:(\d{2})(:(\d{2})([:_\s](\d{2})(:(\d{2})(:(\d{2}))?)?)?)?)?($|\s)/ 
      && ((length($2)>2 || $2>31) && ($2<100 || (1900<$2 && $2<2100))) && do {
	$year = $2  if defined($2); 
	$mon  = $4  if defined($4);
	$day  = $6  if defined($6);
	$hr   = $8  if defined($8);
	$min  = $10 if defined($10);
	$sec  = $12 if defined($12);
	next d2isw if(defined($8)); # $8 is defined if any time field is.
    };

# yyyy:mm:dd hhH:MMm[:SSs]
    m/(\d{2,4}):(\d{2}):(\d{2})\s+(\d{1,2})h?:(\d{2})m?(:(\d{2}s?))?/i && do {
      ($year,$mon,$day,$hr,$min,$sec) = ($1,$2,$3,$4,$5,
					 (defined($7)?$7:0)); 
      next d2isw;
    };

# Numeric MDI-type date and/or timestamp: [yy]yymmdd[hhmm[ss]]
# If this form is used, and a four-digit year is used, we want
# a 19 or 20 at the beginning -- 18th century year dates don't work.
# This regexp probably breaks in 2019.
#
# We stop if we got a timestamp; keep going if it's just a date.
    m/(^|[^\d])((19|20)?\d\d)([01]\d)([0123]\d)((\d\d)(\d\d)(\d\d)?)?($|[^\d])/ && do {
      ($year,$mon,$day)=($2,$4,$5);
      if(defined($6)) {
	($hr,$min,$sec) = ($7,$8,$9);
	next d2isw;
      }
    };

# Datify-style filename with possible leading and trailing cruft; or CDS-style
# datestamp.  If seconds aren't specified then set them to zero and carry on.
    m/((19|20)\d{2})[\.-](\d{2})[\.-](\d{2})[\_T](\d{2})\:(\d{2})(\:(\d{2}))/ && do {
      ($year,$mon,$day,$hr,$min) = ($2,$3,$4,$5,$6);
      if(defined($8)) {
	$sec = $8;
      } else {$sec = 0;}
      next d2isw;
    };
  
##################################################
# Next: Date formats that don't preclude times in the same line
#

# Rock Bush dates: [yy]yy.mm.dd
#
    m/(^|\s)(\d{2,4})\.(\d{1,2})\.(\d{1,2})($|\s)/ && do {
      ($year,$mon,$day) = ($2,$3,$4);
    };

# SI dates:  dd-mmm-yy[yy]
   m/(^|\s)(\d{1,2})\-([a-zA-Z]{3})[a-zA-Z]*(\-(\d{2,4}))?/ && do {
      ($day,$mname) = ($2,$3);
      $year = $5 if(defined($5));
    };

# space-delimited SI dates: dd mmm yy[yy]
    m/(^|\s)(\d{1,2}) (\w{3})[a-zA-Z]* (\d{2,4})?/ && do {
      ($day,$mname) = ($2,$3);
      $year = $4 if defined($4);
    };
    
# American Dates: "mmm[...] dd[, yy[yy]]"
    m/($months)\w*\s+(\d{1,2})(,?\s+(\d{2,4}))?/io && do {
      ($mname,$day) = ($1,$2);
      $year = $4 if(defined($4));
    } 
    unless(defined $mon || defined $mname || defined $day);

# We Don't Do dd/mm/yy[yy] or mm/dd/yy[yy] because they're ambiguous.

# Soho Numeric Dates:  yy[yy]/mm/dd
    m/(\d{2,4})\/(\d{2})\/(\d{2})/ && ((length($1)>2) || ($1 > 31)) && do {
      ($year,$mon,$day) = ($1,$2,$3);
    };


# SOHO dates and bad-SI dates: yy[yy]/mmm/dd and dd/mm/yy[yy]; yy must be >31
# or else 4 digits.
    m/(\d{2,4})\/(\w{3})\/(\d{2,4})/ && do {
      if   (((length($1)>2) || ($1 > 31)) && ((length($3)<=2) && ($3 <= 31))){
	($year,$mname,$day) = ($1,$2,$3);
      } 
      elsif(((length($3)>2) || ($3 > 31)) && ((length($1)<=2) && ($1 <= 31))){
	($year,$mname,$day) = ($3,$2,$1);
      }
    }
    unless(defined $mon || defined $mname || defined $day);

# Mushed-together yymmmdd or yyyymmmdd or ddmmyyyy formats (note we don't
# allow ddmmyy!)
    do {
    if(m/(\d{2,4})($months)(\d{1,2})/oi) {
	($year,$mname,$day) = ($1,$2,$3);
	} else {
	    m/(\d{1,2})($months)(\d{4})/oi &&
		(($day,$mname,$year) = ($1,$2,$3));
	}
  }    unless(defined $mon || defined $mname || defined $day);
    

##################################################
# Time formats that don't preclude dates in the same line
#

# hh:mm
    # hh:mm[:ss] [pm]
    m/(^|[^\d:])(\d{1,2}):(\d{1,2})(:(\d{2}))?($|[^\d:])/ && do{
      (($hr,$min,$sec) = ($2,$3,$5));
    };

    ($pm = m/(^|[^\w])pm($|[^\w])/i);

  }

#                                                           #
# End of main info-gathering loop...                        #
#############################################################

  ##########
  # Clean up the stuff into nice numeric fields for timelocal.
  # We work with "real" calendar month number for now, and then convert
  # to funky localtime() month number later.
  ##########
  if(defined($mname) && $mname) {
    my $i;
    $mname =~ s/^(\w\w\w).*/$1/;
    $mname =~ tr[A-Z][a-z];

    for($i=1;$i<=$#months;$i++) {
      ($mname =~ m/$months[$i]/i) && ($mon=$i) && last;
    }
    print STDERR "Warning: unrecognized month '$mname' ignored.\n" 
      if($i>$#months);
    undef($mname);
  }
  
# Do some sanity checking to prevent timegm from getting confused
  return undef unless ($mon && $day);
  $sec = 0 if (!defined($sec));
  $min = 0 if (!defined($min));
  $hr  = 0 if (!defined($hr));
  
# Figure out the fractional seconds
  $frac = '.' . $frac;

  if($pm) {
    if   ($hr < 12) { 
      $hr += 12; 
    }
    elsif($hr > 12) { 
      print STDERR "Warning: pm modifier ignored on 24-hour time.\n";
    }
    $pm = 0;
  }
  
  if(!defined($year)) {
      $year = (gmtime(time))[5];
  }
      
  $century = int($year/100);
  $year %= 100;

  # Only 1900's & 2000's need apply
  ((($century > 2) && ($century < 19)) || ($century >20)) && return undef;
  
  # Years over 2038 confuse UNIX; feh!
  (($century == 20) && ($year > 37)) && return undef;
  my($base);
  # Work around 1968 bug!
  if($year == 68) {
    $base = &timegm($sec,$min,$hr,$day,--$mon,++$year) - (3600*24*365);
  } else {
    $base = &timegm($sec,$min,$hr,$day,--$mon,$year);
  }
  return $base + $frac - 3600 * $tzn;  # $tzn contains timezone correction from zeroth step
}

1;
