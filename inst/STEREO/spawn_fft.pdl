=head2 spawn_fft - run a large FFT in a separate process

=for ref 

It is hoped that this will prevent problems having to do with memory
fragmentation in a single process's address space.

Accepts the variables to FFT (real and imaginary), and a flag
indicating whether it is inverse.  Returns the transformed variables.
They are modified in-place, just like a real FFT call.

spawn_fft uses a lockfile ("/tmp/spawn_fft.pid") to run only one FFT at a time
globally.  If you weren't worried about memory usage, you wouldn't be running
spawn_fft.

=cut

no PDL::NiceSlice;
our $serialno = 1;

sub spawn_fft {
    my $rp = shift;
    my $ip = shift;
    my $invert = shift;
    
    my $tmpdir = "/tmp/fft_tmp";
    unless(-e $tmpdir) {
	`mkdir $tmpdir`;
    }

    my $lf = "$tmpdir/spawn_fft.pid";

    if($invert) {
	print "INVERSE FFT: ";
    } else {
	print "FFT: ";
    }

    waiting: for(; -e $lf; ) {
	print "found $lf... waiting.";

	open FOO,"<$lf" || last waiting;
	$pid = <FOO>;
	close FOO;
	
	last waiting unless($pid);
	@lines = map { chomp $_; $_;} `ps $pid`;
	
	last waiting if($#lines == 0);
	
	sleep 15;
	print ".";
    }

    `rm -fr $tmpdir/*`;

    open FOO,">$lf";
    print FOO "$$\n";
    close FOO;

    my $prefix = "$tmpdir/$$.$serialno";
    $serialno++;
    
    $rpname = $prefix."-rp.fits";
    $ipname = $prefix."-ip.fits";
    
    print "spawn_fft: writing $rpname and $ipname...";
    wfits($rp, $rpname);
    wfits($ip, $ipname);
    
    print "writing script...\n";
    my $fftcmd = ($invert ? "ifftnd" : "fftnd");
    
    open FOO,">${prefix}-script.pl";
    print FOO <<"EOF";
use PDL;
use PDL::FFT;
use PDL::IO::FITS;
\$PDL::BIGPDL = 1;

\$rp = rfits("$rpname");
\$ip = rfits("$ipname");
   
$fftcmd(\$rp, \$ip);

      for \$i(0..\$rp->dim(2)-1)    {
	wfits(\$rp->slice(":,:,(\$i)")->copy, sprintf("$rpname-%d",\$i));
	wfits(\$ip->slice(":,:,(\$i)")->copy, sprintf("$ipname-%d",\$i));
      }
    
exit(0);
EOF
	
    close FOO;
	

  try: for $j(1..5){
      print "Running script...\n";
      print `perl ${prefix}-script.pl`;
      
      print "Reading transformed files";
    files: for $i(0..$rp->dim(2)-1) {
	my $rpn = sprintf("$rpname-%d",$i);
	my $ipn = sprintf("$ipname-%d",$i);
	if(!-e $rpn || !-e $ipn) {
	    print "Hey!  $rpn or $ipn doesn't exist!\n";
	    print "Script must have crashed...\n";
	    print "Trying it again ($j)...\n";
	    next try;
	}
	$rp->slice(":,:,($i)") .= rfits($rpn);
	$ip->slice(":,:,($i)") .= rfits($ipn);
	unlink($rpn);
	unlink($ipn);
    }
      print "\n";
      
      unlink($lf);
      unlink($rpname);
      unlink($ipname);
      unlink("${prefix}-script.pl");
      
      return ($rp, $ip);
  
  }

    # Can't get here normally
    print "Tries exhausted.  Damn.\n";
    return;
}

		
