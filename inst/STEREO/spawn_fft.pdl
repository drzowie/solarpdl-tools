=head2 spawn_fft - run a large FFT in a separate process

=for ref 

It is hoped that this will prevent problems having to do with memory
fragmentation in a single process's address space.

Accepts the variables to FFT (real and imaginary), and a flag indicating whether it is inverse.
Returns the transformed variables.  If their inplace flags are set, then they are changed in-place;
otherwise not.

=cut

no PDL::NiceSlice;
our $serialno = 1;

sub spawn_fft {
    my $rp = shift;
    my $ip = shift;
    my $invert = shift;

    if($invert) {
	print "INVERSE FFT: ";
    } else {
	print "FFT: ";
    }

    my $prefix = "/tmp/$$.$serialno";
    $serialno++;
    
    $rpname = $prefix."-rp.fits";
    $ipname = $prefix."-ip.fits";
    
    print "spawn_fft: writing $rpname and $ipname...";
    print "rp minmax is ".(join(",",$rp->minmax))."\n";
    wfits($rp, $rpname);
    wfits($ip, $ipname);
    
    print "writing script...\n";
    my $fftcmd = ($invert ? "ifftnd" : "fftnd");
    
    open FOO,">${prefix}-script.pl";
    print FOO <<"EOF";
use PDL;
use PDL::FFT;
use PDL::IO::FITS;
\$PDL::BIGPDL = 1;

\$rp = rfits("$rpname");
\$ip = rfits("$ipname");
   
$fftcmd(\$rp, \$ip);
    
wfits(\$rp->copy, "${rpname}-out");
wfits(\$ip->copy, "${ipname}-out");
    
exit(0);
EOF
	
    close FOO;
	
    print "Running script...\n";

    print `perl ${prefix}-script.pl`;

    print "Reading transformed files...\n";
    $rp = rfits($rpname."-out");
    $ip = rfits($ipname."-out");

    my @mm = $rp->minmax;
    if($mm[0]==0 && $mm[1]==0) {
	die "FFT failed!\n";
    }

    unlink($rpname);
    unlink($ipname);
    unlink($rpname."-out");
    unlink($ipname."-out");
    unlink("${prefix}-script.pl");

    return ($rp, $ip);
}
		
