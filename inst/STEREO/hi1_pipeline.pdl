=head2 hi1_pipeline - invoke the background-subtraction pipeline on a batch of hi1 data.

=for usage
     
     $out = hi1_pipeline( $in_list, $opt );

=for ref

     Accepts a list of FITS files, generates a collection of FITS files in a specified output
     directory.

=cut
$PDL::BIGPDL = 1;

sub hi1_pipeline {
    my $in_list = shift;
    my $opt = shift;

    my $opt_defaults = {

	OUTPUT_DIR		=> 'processed', # where to put output files
	OUTPUT_FILES		=> 1,           # Whether to generate output

	pct			=> 2,     # 2% for F corona
	sm                      => [5,5],            
	bin			=> 0,
	REMOVE_FLUCTUATIONS	=> 1,
	MASK_RADIUS             => 0,
	MARK_BAD                => 0,

	ALIGN_PATCHSIZE		=> 30,

	NULL_MIN_PCT		=> 5,
	NULL_SMOOTH_SIZE	=> [7,5],

	MIN_SMOOTH_SIZE		=> 5,
	POLY_ORDER              => 6,

	FILTER_APOD_MARGIN      => 80,
	FILTER_MASK_TRIGGER     => 3,
	FILTER_CUTOFF_PPF       => 0.5,

	DIST_GUESS_DRIFTRATE	=> 260/5,
	DIST_CORRTIME	        => 2,
	DIST_CORR_NSAMP	        => 25,
	PIXEL_XRANGE            => pdl(2,1022),
	PIXEL_YRANGE            => pdl(2,1022),
	DEBUG_PIPELINE          => 1,
	DEBUG_OUTPUT_PREFIX     => "tmp/",
	CLEAN_MARGIN_FRAMES     => 2,

    };


    my $k;
    for $k(keys %$opt_defaults) {
	$opt->{$k} = $opt_defaults->{$k} unless(exists($opt->{$k}));
    }

    our $hash;
	
    $hash = remove_f_corona($in_list, $opt);      # initial f coronal background sub

    if($opt->{DEBUG_PIPELINE}) {
	print "Dumping raw cube to $opt->{DEBUG_OUTPUT_PREFIX}raw.fits\n";
	wfits( $hash->{RAW_CUBE}, $opt->{DEBUG_OUTPUT_PREFIX}."raw.fits" );
	print "Dumping bksub cube to $opt->{DEBUG_OUTPUT_PREFIX}bksub.fits\n";
	wfits( $hash->{BKSUB_CUBE}, $opt->{DEBUG_OUTPUT_PREFIX}."bksub.fits");
	print "Dumping mask cube to $opt->{DEBUG_OUTPUT_PREFIX}mask.fits\n";
	wfits( $hash->{MASK_CUBE}, $opt->{DEBUG_OUTPUT_PREFIX}."mask.fits");
    }
    print "distortion parameters...\n";
    get_distortion_params($hash, $opt);   # measure stellar drift
    
    print "shift_to_celestial...\n";
    shift_to_celestial($hash, $opt);      # nullify stellar drift

    delete $hash->{RAW_CUBE};
    delete $hash->{BKSUB_CUBE};
    delete $hash->{MASK_CUBE};
    if($opt->{DEBUG_PIPELINE}) {
	print "Dumping celestial cube to $opt->{DEBUG_OUTPUT_PREFIX}cel.fits\n";
	wfits( $hash->{CEL_CUBE}, $opt->{DEBUG_OUTPUT_PREFIX}."cel.fits" );
	print "Dumping cel mask to $opt->{DEBUG_OUTPUT_PREFIX}cmask.fits\n";
	wfits( $hash->{CEL_MASK}, $opt->{DEBUG_OUTPUT_PREFIX}."cmask.fits" );
    }

    print "null_stars...\n";
    null_stars($hash, $opt);              # try to cancel out the starfield

    print "remove_polynomials...\n";
    remove_polynomials($hash,$opt);       # remove slow background drift
    motion_filter($hash,$opt);            # FFT for moving stuff

#    print "post-motion-filter: remove zero point...\n";    
#    $c2min = $hash->{CEL_CUBE}->mv(2,0)->qsort->((0.03 * $hash->{CEL_CUBE}->dim(2)));
#    $hash->{CEL_CUBE} -= $c2min;
#   final_zero($hash);                    # take out HI1 brain damaged exposure variation

    shift_to_instrument($hash,$opt);      # put back in instrument coordinates

    # Dump output to files...
    `mkdir $opt->{OUTPUT_DIR}`;
    if($opt->{OUTPUT_FILES}) {
	for $i($opt->{CLEAN_MARGIN_FRAMES}..$hash->{CLEAN_CUBE}->dim(2)-1-$opt->{CLEAN_MARGIN_FRAMES}) {
	    my $im = $hash->{CLEAN_CUBE}->(:,:,($i))->copy;
	    $im->sethdr($hash->{RAW_HDRS}->[$i]);
	    my $fname = sprintf ("%s/clean-%s--BATCH-%s.fits", $opt->{OUTPUT_DIR}, $im->hdr->{'DATE-OBS'}, $hash->{RAW_HDRS}->[0]->{'DATE-OBS'});
	    printf("Writing file %d of %d: %s\n",  $i,  $hash->{CLEAN_CUBE}->dim(2) - 1,  $fname);
	    wfits($im, $fname);
	}
    }    
}
