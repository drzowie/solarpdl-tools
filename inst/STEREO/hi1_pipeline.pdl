=head2 hi1_pipeline - invoke the background-subtraction pipeline on a single batch of hi1 data.

=for usage
     
     $out = hi1_pipeline( $in_list, $opt );

=for ref

Accepts a list of FITS files, generates a collection of FITS files in a specified output
directory.


=cut
$PDL::BIGPDL = 1;

sub hi1_pipeline {
    my $in_list = shift;
    my $opt = shift;

    my $opt_defaults = {

	OUTPUT_DIR		=> 'processed', # where to put output files
	OUTPUT_FILES		=> 1,           # Whether to generate output

	pct			=> 2,     # 2% for F corona
	sm                      => [5,5],            
	bin			=> 0,
	REMOVE_FLUCTUATIONS	=> 1,
	MASK_RADIUS             => 0,
	MARK_BAD                => 0,

	DIST_CORRTIME           => 3,
	DIST_CORR_NSAMP		=> 40,
	DIST_CORR_RSIZE         => 35,
	DIST_CORR_PSIZE         => 35,
	DIST_GUESS_DRIFTRATE    => 260/5,

	NULL_MIN_PCT		=> 5,
	NULL_SMOOTH_SIZE	=> [9,7],
	NULL_SMOOTH_FRAMES      => 1,

	MIN_SMOOTH_SIZE		=> 5,
	POLY_ORDER              => 4,

	MOTION_FILTER           => 1,
	FILTER_APOD_FRAMES      => 5,
	FILTER_MAX_SIZE         => 30,
	FILTER_APOD_MARGIN      => 40,
	FILTER_MASK_TRIGGER     => 1e-12,
	FILTER_US_SIZE		=> 11,
	FILTER_CUTOFF_PPF       => 1,
	FILTER_HYPERSMOOTHING   => 1,
	FILTER_REMOVE_FIXED     => 0,
	FILTER_ZAP_HF           => 0,

	PIXEL_XRANGE            => pdl(2,1022),
	PIXEL_YRANGE            => pdl(2,1022),
	DEBUG_PIPELINE          => 0,
	DEBUG_OUTPUT_PREFIX     => "tmp/",
	CLEAN_MARGIN_FRAMES     => 2,

    };


    my $k;
    for $k(keys %$opt_defaults) {
	$opt->{$k} = $opt_defaults->{$k} unless(exists($opt->{$k}));
    }

    our $hash;
	
    $hash = remove_f_corona($in_list, $opt);      # initial f coronal background sub
    delete $hash->{RAW_CUBE};

    print "distortion parameters...\n";
    get_distortion_params($hash, $opt);   # measure stellar drift


    print "Despiking...\n";
    
    for $i(0..$hash->{BKSUB_CUBE}->dim(2)-1){
	my $im = spikejones($hash->{BKSUB_CUBE}->(:,:,($i)),{dilation=>1});
	$im = spikejones($im,{dilation=>2});
	$hash->{BKSUB_CUBE}->(:,:,($i)) .= $im;
	print "$i...";
    }
    print "\n";

    print "Removing polynomials...\n";
    $opt->{POLY_CUBE} = "BKSUB";
    local($opt->{POLY_PRESMOOTH}) = 5;
    remove_polynomials($hash,$opt);       # remove slow background drift

    print "shift_to_celestial...\n";
    shift_to_celestial($hash, $opt);      # nullify stellar drift
    
    if($opt->{DEBUG_PIPELINE}) {
	$a = $opt->{OUTPUT_DIR}."-cel";
	`mkdir $a`;
	for $i(0..$hash->{CEL_CUBE}->dim(2)-1){
	    my $im = $hash->{CEL_CUBE}->(:,:,($i))->copy;
	    $im->sethdr($hash->{RAW_HDRS}->[$i]);
	    wfits($im, sprintf("%s/frame-%4.4d.fits",$a,$i));
	}
    }

    delete $opt->{BKSUB_CUBE};

    print "null_stars...\n";
    null_stars($hash, $opt);              # try to cancel out the starfield

    print "Write nulled stuff...\n";
    $a = $opt->{OUTPUT_DIR}."-nofft";
    `mkdir $a` if($opt->{DEBUG_PIPELINE});

    print "i: ".$opt->{CLEAN_MARGIN_FRAMES}."..".$hash->{CEL_CUBE}->dim(2)-1-$opt->{CLEAN_MARGIN_FRAMES}."\n";

    if($opt->{DEBUG_PIPELINE}) {
        for $i($opt->{CLEAN_MARGIN_FRAMES}..$hash->{CEL_CUBE}->dim(2)-1-$opt->{CLEAN_MARGIN_FRAMES}) {
	    my $im = $hash->{CEL_CUBE}->(:,:,($i))->copy;
	    $im->sethdr($hash->{RAW_HDRS}->[$i]);
	    my $fname = sprintf("%s/frame-%4.4d.fits",$a,$i);
	    wfits($im,$fname);
	}
	print "Done writing nulled stuff...\n";
    }

    if($opt->{MOTION_FILTER}) {
	print "Motion filter...\n";
	motion_filter($hash,$opt);  # final clean... I hope.	
    } else {
	print "No motion filter...\n";
    }

    if($opt->{DEBUG_PIPELINE}){
	$a = $opt->{OUTPUT_DIR}."-fft";
	`mkdir $a`;
	print "i: ".$opt->{CLEAN_MARGIN_FRAMES}."..".$hash->{CEL_CUBE}->dim(2)-1-$opt->{CLEAN_MARGIN_FRAMES}."\n";
	for $i($opt->{CLEAN_MARGIN_FRAMES}..$hash->{CEL_CUBE}->dim(2)-1-$opt->{CLEAN_MARGIN_FRAMES}) {
	    print "$i\n";
	    my $im = $hash->{CEL_CUBE}->(:,:,($i))->copy;
	    $im->sethdr($hash->{RAW_HDRS}->[$i]);
	    my $fname = sprintf("%s/frame-%4.4d.fits",$a,$i);
	    printf("Writing test file %d of %d\n",$i,$hash->{CEL_CUBE}->dim(2)-1);
	    wfits($im,$fname);
	}
    }

    shift_to_instrument($hash,$opt);      # put back in instrument coordinates

    # Dump output to files...
    `mkdir $opt->{OUTPUT_DIR}`;
    if($opt->{OUTPUT_FILES}) {
	for $i($opt->{CLEAN_MARGIN_FRAMES}..$hash->{CLEAN_CUBE}->dim(2)-1-$opt->{CLEAN_MARGIN_FRAMES}) {
	    my $im = $hash->{CLEAN_CUBE}->(:,:,($i))->copy;
	    $im->sethdr($hash->{RAW_HDRS}->[$i]);
	    my $fname = sprintf ("%s/clean-%s--BATCH-%s.fits", $opt->{OUTPUT_DIR}, $im->hdr->{'DATE-OBS'}, $hash->{RAW_HDRS}->[0]->{'DATE-OBS'});
	    printf("Writing file %d of %d: %s\n",  $i,  $hash->{CLEAN_CUBE}->dim(2) - 1,  $fname);
	    wfits($im, $fname);
	}
    }    
}
