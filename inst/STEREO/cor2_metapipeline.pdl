=head2 cor2_metapipeline - process a bunch of cor2 L1 files in batches

Process cor2 L1 files by background subtraction, scaling, and motion filtration.

=cut

use Date::Parse;
use PDL::NiceSlice;

sub cor2_metapipeline {
    my $files = shift;
    my $opt = shift;
    
    $opt = {} unless defined($opt);
    
    $defaults = {
	BATCH_START  => 0,
	BATCH_LENGTH => 3,
	BATCH_STEP   => 0.5,
	BATCH_MIN_FRAC => 0.75,
	PROCESSES    => 3,
	MOTION_FILTER=> 1,
	MAKE_BACKGROUNDS => 1,
	OUTPUT_SIZE => 1400,
	BKG_DIR => "bkgnd"              # background directory for make_backgrounds.
    };
    
    for $k(keys %$defaults) {
	$opt->{$k} = $defaults->{$k} unless exists($opt->{$k});
    }

    if($opt->{MAKE_BACKGROUNDS}) {
        print "*********\nCOR-2 metapipeline -- making bkg images for ".(0+@$files)." files...*************\n";
	local($opt->{OUTDIR}) = $opt->{BKG_DIR};
	if(-e $opt->{OUTDIR}) {
	    die "remove bkgnd first!";
	}

	make_backgrounds($files, $opt);
    }     

    print "*********\nCOR-2 metapipeline - found ".(0+@$files)." files to process.  Reading their headers...\n";
    my @headers = map { print "."; scalar(rfits($_,{data=>0})) } @$files;
    my @times = map { str2time($_->{"DATE-OBS"}) + $_->{"EXPTIME"}/2 } @headers;
    my $times = pdl(@times);

    my $last_start = $times[$#times] - $opt->{BATCH_LENGTH}*0.75*3600*24;
    my $t;

    my @start_times = ();
    for($t=$times[0]; $t<$last_start; $t+= $opt->{BATCH_STEP} * 3600 * 24) {
	push(@start_times, $t);
    }

    print "Running ".(0 + @start_times). "batches of $opt->{BATCH_LENGTH} days (separated by $opt->{BATCH_STEP} days)...\n";
    my %pids = ();
    for $batchno($opt->{BATCH_START}..$#start_times) {

	# Reap as necessary before spawning a new process...
	$waited = 0;	
	while( (0 + keys(%pids)) >= $opt->{PROCESSES} ) {
	    print "Waiting for a process to exit..."; 
	    $waited = 1;
	    $exitpid = wait();
	    print "wait returned $exitpid\n\n";
	    if($exitpid<0) {
		%pids = ();
	    } else {
		delete $pids{$exitpid};
	    }
	}

	
	# stoopid but effective - generate a list of files in the given time range
	my @batchfiles = ();
	for $i(0..$#times){
	    $bt = $times[$i];
	    if($bt >= $start_times[$batchno] && 
	       $bt <= $start_times[$batchno] + 24 * 3600 * $opt->{'BATCH_LENGTH'}) {
		push(@batchfiles,$files->[$i]);
	    }
	}
	
	print "Batch $batchno - sending ".(0+@batchfiles)." files to subprocess: \n".(join("--",@batchfiles[0,$#batchfiles]))."\n\n";

	$pid = fork();
	
    	    if($pid<0) {
		die "FORK FAILED!";
	    } 
	    if($pid) {
		# Parent
		$pids{$pid}=$batchno;

		print "pids is now:\n";
		for $k(sort keys %pids) {
		    print "\t$k - batch $pids{$k}\n";
		}
		print "\n";
	    } else {
		#Daughter
		eval {
		    $opt->{OUTPUT_DIR}           =  sprintf("batch-%3.3d",$batchno);
		    $opt->{DEBUG_OUTPUT_PREFIX}  =  sprintf("tmp/o-%3.3d",$batchno);
		    $opt->{MAKE_BACKGROUNDS}     =  0; # already done up above
		    open STDOUT,sprintf(">log-batch-%3.3d",$batchno);
		    open STDERR,STDOUT;
		    print "calling cor2_pipeline...\n";
		    cor2_pipeline(\@batchfiles,
				 $opt);
		};
		print $@;
		exit(0);
	    }
    }

    # Clean up any leftover processes.
    while( (0 + keys(%pids)) > 0 ) {
	print "Finishing up: waiting for a process to exit..."; 
	$exitpid = wait();

	print "wait returned $exitpid\n\n";

	if($exitpid<0) {
	    %pids = ();
	} else {
	    delete $pids{$exitpid};
	}
    }
}



