use strict;

=head2 correlate_patch 

=for usage

 $of = correlate_patch($im0, $im1, $loc0, $of0, $size0, $patchr0, $corr_thresh);

=for ref

Cross-correlate starfield image patches to identify their offsets.
Returns the offset, or undef in case of error.  Uses amoeba to perform
the close fitting.

You feed in two images, a location in one, an offset vector to the
corresponding location in the other (all in pixel coordinates, of
course), a size of a region to consider, a patch radius, and a minimum
correlation coefficient below which the fit is rejected.

You get back out a new offset vector.

=cut
use PDL::NiceSlice;

our $ww0;

sub correlate_patch {
    my $im0 = shift;               # full image
    my $im1 = shift;               # full image
    my $loc0 = shift;	           # 2-PDL: location in im0
    my $of0 = shift;  	           # 2-PDL: guess offset to location im im1
    my $size0 = shift;             # radius of offset ranges to consider (in pixels)    
    my $patchr0 = shift;
    my $corr_thresh = shift || 0.985;
    
    my $size = pdl(0,0)+$size0;
    my $patchr = (defined $patchr0) ? $patchr0 + pdl(0,0) : $size->copy;
    
    ##########
    # step 0: in case of interference, return undef.
    my $field0 = $im0->range( $loc0        - $size- $patchr, $patchr*2 + $size*2 + 1,'t');
    my $field1 = $im1->range( $loc0 + $of0 - $size- $patchr, $patchr*2 + $size*2 + 1,'t');

    print "field0: range starts at (",$loc0-$size-$patchr,"); size is ",$patchr*2+$size*2 + 1,"\n";

    if(defined($ww0)){
        $ww0->imag($field0,{title=>"im0: loc=".($loc0-$size-$patchr),charsize=>2});
	$ww0->imag($field1,{title=>"im1: loc=".($loc0+$of0-$size-$patchr),charsize=>2});
    }
    

    ##########
    # Step 2: try to maximize correlation with subpixel precision
    use PDL::Transform;
    my $pdims = [($patchr*2+1)->list];
    my $mparams = {method=>'h',blur=>1.25, pix=>1};

    my $corr;
    my $patch0;
    my $patch1;

    my $heur = sub {
       my $dx = shift;
       my ($deltax,$deltay) = $dx->list;
       our $heurcount;


       $patch0 = $im0->map(t_linear(pre=> pdl(- $loc0        - $dx->(0:1)  ), rot=>-$dx->((2)), post=>$patchr), $pdims, $mparams);
       $patch1 = $im1->map(t_linear(pre=> pdl(- $loc0 - $of0 + $dx->(0:1)  ), rot=>$dx->((2)), post=>$patchr), $pdims, $mparams);
       if(defined($ww0)){
	   $ww0->imag($patch0-$patch1,-0.5,0.5,{dr=>1,title=>"Diff. (x=$dx; corr=$corr)",charsize=>2}) ;
	   $ww0->hold;
       }
       my $p0= $patch0->clump(2);
       my $p1= $patch1->clump(2);

       my $p0av = $p0->average;
       my $p0p  = $p0 - $p0av->(*1);
       my $p0sd = ( $p0p * $p0p )->average->sqrt;
       
       my $p1av = $p1->average;
       my $p1p = $p1 - $p1av->(*1);
       my $p1sd = ( $p1p * $p1p )->average->sqrt;
       $corr = ($p0p * $p1p)->average / $p0sd / $p1sd;

       return 1.0 - $corr;
    };

    my $x = amoeba($heur, pdl(-0.5,-0.5,-0.5),1,1e-2,1e-4,1000);

    if(defined($ww0)) {
	$ww0->release;
    }
    unless(defined $x) {
	print " fit failed!\n";
	return undef;
    }

    unless($corr>=$corr_thresh) {
	print " corr=$corr: too low\n";
	return undef;
    }

    return ( $of0 - $x->(0:1)*2 );
}


