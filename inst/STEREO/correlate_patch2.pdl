use strict;

=head2 correlate_patch2

=for usage

 $of = correlate_patch2($im0, $im1, $loc0, $of0, $size0, $patchr0, $corr_thresh);

=for ref

Cross-correlate starfield image patches to identify their offsets.
This is modeled on correlate_patch, but hopefully more robust.

You feed in two images, a location in one, a guess offset vector to the
corresponding location in the other (all in pixel coordinates, of
course), a size of a region to consider, a patch radius, and a minimum
correlation coefficient below which the fit is rejected.

The purpose of the guess offset vector is to reduce the size of the
region to consider for the initial coarse search.  If the size of the
region to consider is large enough, you can set the guess offset vector 
to 0.

You get back out a new offset 2-vector, in floating point pixel steps by which
the patch in the initial image must be translated to arrive at the corresponding
location in the final image.

The sizes are radii rather than diameters, and the diameter is always rounded to 
be odd -- so to use a 25x25 pixel region, specify either 12 or 13.

=cut

sub correlate_patch2 {
    my $im0  = shift;   # full image
    my $im1  = shift;   # full image 
    my $loc0 = shift;   # 2-PDL: location in im0 (pixels)
    my $of0  = shift;   # 2-PDL: guess offset in piels to location in im1
    my $size0 = shift;  # radius of offset ranges to consider (in pixels)
    my $patchr0 = shift;
    my $corr_thresh = shift || 0.85;

    # Double the size and patchr to make sure we have even numbers for the diameter.
    my $sized = pdl(long,$size0)*2 + pdl(0,0);
    my $patchd = (defined $patchr0) ? pdl(long,$patchr0)*2 + pdl(0,0) : size->copy;

    ##########
    # step 1:
    my $bigsized = $sized + $patchd;

    our $reg0 = $im0->range($loc0-$bigsized/2, $bigsized+1, 't')->sever;
    $reg0 -= $reg0->avg;
    $reg0 /= sqrt(($reg0*$reg0)->sum);

    our $reg1 = $im1->range($loc0-$bigsized/2 + $of0, $bigsized+1, 't')->sever;
    $reg1 -= $reg1->avg;
    $reg1 /= sqrt(($reg1*$reg1)->sum);

    $reg0->inplace->setbadtoval(0);
    $reg1->inplace->setbadtoval(0);

    our $crosscorr = $reg0->(-1:0:-1,-1:0:-1)->convolveND($reg1,{bound=>'t'});
    my $maxloc = whichND($crosscorr == $crosscorr->max)->(:,(0));

    my $prelim_of;
    if($maxloc->nelem) {
        $prelim_of = $maxloc - $bigsized/2 + $of0;
    } else {
	$prelim_of = pdl(0,0);
    }

    ##########
    # step 2: extract the region of interest and carry out a more selective fit to get
    # just the pixel field around the ROI.
    $reg0 = $im0->range($loc0 - $patchd/2,              $patchd+1, 't')->sever;
    $reg0 -= $reg0->avg;
    $reg0 /= sqrt(($reg0*$reg0)->sum);

    $reg1 = $im1->range($loc0 - $patchd/2 + $prelim_of, $patchd+1, 't')->sever;
    $reg1 -= $reg1->avg;
    $reg1 /= sqrt(($reg1*$reg1)->sum);

    $reg0->inplace->setbadtoval(0);
    $reg1->inplace->setbadtoval(0);

    $crosscorr = $reg0->(-1:0:-1,-1:0:-1)->convolveND($reg1,{bound=>'t'});

    $maxloc = whichND($crosscorr==$crosscorr->max)->(:,(0));

    my $pix_of = $prelim_of + $maxloc - $patchd/2;
    
    ##########
    # step 3: check the location of the peak.

    $reg1 = $im1->range($loc0-$patchd/2 + $pix_of, $patchd+1,'t')->sever;
    $reg1 -= $reg1->avg;
    $reg1 /= sqrt(($reg1*$reg1)->sum);

    $reg1->inplace->setbadtoval(0);
    
    $crosscorr = $reg0->(-1:0:-1,-1:0:-1)->convolveND($reg1,{bound=>'t'});
    $maxloc = whichND($crosscorr==$crosscorr->max)->(:,(0));

    my $final_pix_of = $pix_of + $maxloc - $patchd/2;

    ##########
    # step 4: get the subscale offset by finding the weighted average of the peak.

    my $crosscorr_subpix = $crosscorr->range($maxloc-2,pdl(5,5),'t')->sever;
    $crosscorr_subpix /= $crosscorr_subpix->sum;

    my $xv = xvals($crosscorr_subpix) - 2;
    my $yv = $xv->mv(1,0);
    my $xcen = ($crosscorr_subpix * $xv)->sum;
    my $ycen = ($crosscorr_subpix * $yv)->sum;
    
    $final_pix_of += pdl($xcen,$ycen);

    ##########
    # step 5: check the correlation coefficient with proper resampling, for thresholding

    $reg0 = $im0->map( t_linear(pre=>-($loc0-$patchd/2)),               [($patchd+1)->list], {method=>'g',pix=>1});
    $reg0 -= $reg0->avg;
    $reg0 /= sqrt(($reg0*$reg0)->avg);

    $reg1 = $im1->map( t_linear(pre=>-($loc0-$patchd/2)-$final_pix_of), [($patchd+1)->list], {method=>'g', pix=>1});
    $reg1 -= $reg1->avg;
    $reg1 /= sqrt(($reg1*$reg1)->avg);

    my $corr = ($reg0 * $reg1)->avg;

    $final_pix_of = asin(pdl(1.1,1.1)) if($corr < $corr_thresh);

    return $final_pix_of;
}
    
