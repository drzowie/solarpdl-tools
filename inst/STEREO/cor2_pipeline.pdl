use Date::Parse;

=head2 cor2_pipeline - do background subtraction and despiking on a batch of cor2 data.

=for usage

     $out = cor2_pipeline( $in_list, $opt );

=for ref

     Accepts a list of FITS files, generates a collection of FITS files in a specified output directory.

=cut

sub cor2_pipeline {
    my $in_list = shift;
    my $opt = shift;

    print "cor2_pipeline...\n";

    my $defaults = {
	OUTPUT_DIR   => "processed",
	OUTPUT_FILES => 1,
	MOTION_FILTER => 1,
	MAKE_BACKGROUNDS => 0,  
	BKG_DIR => "bkgnd",
	OUTPUT_SIZE => undef,
	CUT_RANGE => [0,1023,0,2047]
    };

    for $k(keys %$defaults) {
	$opt->{$k} = $defaults->{$k} unless(exists $opt->{$k});
    }

    my $bkdir = $opt->{BKG_DIR};

    if($opt->{MAKE_BACKGROUNDS}) {
	print "--- Making background images ---\n";
	`mkdir $opt->{OUTPUT_DIR}`;
	local($opt->{OUTDIR}) = $bkdir;
	make_backgrounds($in_list, $opt);
    }

    ##############################
    # remove_f_corona is a bad idea here because the data volume is too high -- so we have to use the
    # existing backgrounds (above) and subtract.    
    @bkfiles = <$bkdir/*>;
    if(@bkfiles < 1) {
	die "Must have at least one background file in $bkdir!";
    }

    local($opt->{WRITE_FILES}) = 0;
    ($bks_cube,$hdrs) = subtract_backgrounds($in_list,\@bkfiles,$opt);

    print "despiking ".($bks_cube->dim(2))." images";
    for $i(0..$bks_cube->dim(2)-1) {
	print ".";
	my $layer = $bks_cube->(:,:,($i));
	$layer .= spikejones($layer, {siz=>5});
    }
    print "\n";

    ##############################
    # Mask out the stuff outside the original FOV
    use PDL::Transform;
    my $coords = ndcoords($bks_cube->dim(0),$bks_cube->dim(1)) -> 
	apply(t_fits($hdrs->[0]));
    my $r2 = ($coords*$coords)->sumover;
    $mask = ($r2 <= (4.125*4.125*3600*3600)) & ($r2 >= 3000*3000);
    
    $hash = {CEL_CUBE => $bks_cube,
	     CEL_MASK => $mask
    };

    if(0) {
        print "Writing tmp files to $opt->{OUTPUT_DIR}-tmp...\n";
	`mkdir $opt->{OUTPUT_DIR}-tmp`;
	for $i(0..$#$in_list){
	    $a = $hash->{CEL_CUBE}->(:,:,($i))->copy;
	    $a->sethdr($hdrs->[$i]);
	    $a *= $mask;
	    $file = $in_list->[$i];
	    $file =~ s:.*\/::;
	    $file = $opt->{OUTPUT_DIR}."-tmp/".$file;
	    wfits($a,$file);
	    print "$file...";
	}
	print "\n";
    }

    motion_filter($hash,$opt);
    
    # write to individual files here
    `mkdir $opt->{OUTPUT_DIR}`;

    print "Writing files to $opt->{OUTPUT_DIR}...\n";
    for $i(0..$#$in_list) {
	$a = $hash->{CEL_CUBE}->(:,:,($i))->copy;
	$a->sethdr($hdrs->[$i]);
	$file = $in_list->[$i];
	$file =~ s:.*\/::;
	$file = $opt->{OUTPUT_DIR}."/".$file;
	wfits($a, $file);
	print "$file...";
    }
    print "\n";
    return $hash;
}
	     
