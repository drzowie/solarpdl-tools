=head2 clean_bad - try to clean up a collection of images 

=for ref

Finds bad spots in the images and replaces them with nearest values
from time and/or space.

=cut

sub clean_bad {
    my $infiles = shift;
    my $outdir = shift || "clean";

    print "clean_bad -- cleaning ".$#$infiles." files...\n";

    @if = ();
    for $i(0..$#$infiles) {
	$h = rfits($infiles->[$i],{data=>0});
	if($h->{NAXIS1} == $h->{NAXIS2} and $h->{NAXIS2}==1024) {
	    print "$infiles->[$i] OK\n";
	    push(@if,$infiles->[$i]);
	} else {
	    print "infiles->[$i] is ",$h->{NAXIS1}."x".$h->{NAXIS2}."; rejecting\n";
	}
    }

    `mkdir $outdir`;
    @of = @if;
    map { s:.*\/:$outdir\/: } @of;
    print "Processing $#if files...\n";
    $in = diskcache(\@if,{ro=>1});

    $sub = sub {
        $i = shift;
	$inframe = $in->[$i];

	$inframe = $in->[$i];
	$badloc = whichND( $inframe->isbad );
	if($badloc->nelem) {
	    $badloc = $badloc->glue(0,zeroes(1,$badloc->dim(1)));
	    $nearcube = pdl( map { $in->[$_] } ($i-2..$i+2));
	    $nearcube = $nearcube->setbadif($nearcube < -100);
	    $chunks = $nearcube->range( $badloc - 2, [5,5,5] ,'e' );
 	    $repl = $chunks->clump(1,2,3)->mv(1,0)->average;
	    print "repl has ".($repl->isbad->sum)." bad elements ";
	    $out = $inframe->copy;
	    $out->indexND($badloc) .= $repl;
	    $out->sethdr($in->[$i]->hdr_copy);
	    $newbadloc = whichND($out->isbad);
	    $out->hdr->{HISTORY} .= "Removed ".$badloc->dim(1)." BAD points; ".($newbadloc->nelem/2)." remain.\n";
	    wfits($out,$of[$i]);
	    print "$f[$i] -> $of[$i] ($i of $#$infiles). ".
		$badloc->dim(1)." BAD points found; output has ".
		($newbadloc->nelem / 2)."\n";
	} else {
	    $out = $inframe;
	    wfits($out, $of[$i]);
	    print "$if[$i] -> $of[$i] ($i of $#$infiles). ".
		"no BAD points.\n";
	}
	if(defined($w)&& ($badloc->nelem || ($i%10==0))) {
	    $w->imag($out,0,30); $w->hold;
	    $w->text("$i of $#if - $if[$i]",100,100);
	}
    };

    multicore([2..$#if-3],$sub,4);

}
    
