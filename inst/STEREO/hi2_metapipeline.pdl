=head2 hi2_metapipeline - process a bunch of hi2 L1 files in batches

=cut

use Date::Parse;
use PDL::NiceSlice;

sub hi2_metapipeline {
    my $files = shift;	
    my $opt = shift;

    $opt = {} unless defined($opt);

    $defaults = {
	BATCH_LENGTH		=> 9,
	BATCH_STEP      	=> 2,
	BATCH_START             => 0,
	BATCH_STOP              => 0,
	BATCH_PREFIX            => "",
	PROCESSES		=> 5,
	DIST_CORRTIME   	=> 5,
	DIST_CORR_NSAMP 	=> 50,
	DIST_GUESS_DRIFTRATE	=> 72/5,
	NULL_SMOOTH_SIZE	=> 5,
	PIXEL_XRANGE		=> pdl(0,1023),
	PIXEL_YRANGE		=> pdl(25,1000)
    };
	
    for $k(keys %$defaults) {
	$opt->{$k} = $defaults->{$k} unless exists($opt->{$k});
    }

    print "*********\nHI-2 metapipeline - found ".(0+@$files)." files to process.  Reading their headers...\n";
    my @headers = map { print "."; rfits($_,{data=>0}) } @$files;

    my @times = map { str2time($_->{"DATE-OBS"}) + $_->{"EXPTIME"}/2 } @headers;
    my $times = pdl(@times);

    my $last_start = $times[$#times] - $opt->{BATCH_LENGTH}*0.75 * 3600 * 24;
    my $t;

    my @start_times = ();
    for($t=$times[0]; $t<$last_start; $t += $opt->{BATCH_STEP} * 3600 * 24) {
	push(@start_times, $t);
    }

    print "Identified ".(0+@start_times)." batches of $opt->{BATCH_LENGTH} days (separated by $opt->{BATCH_STEP} days)...\n";

    my %pids = ();

    for $batchno($opt->{BATCH_START}..($opt->{BATCH_STOP} || $#start_times)) {
	print "Batch $batchno...\n";

	# Reap as necessary before spawning a new process...
	
	while( (0 + keys(%pids)) >= $opt->{PROCESSES} ) {
	    print "Waiting for a process to exit..."; 
	    print "Current children are: \n";
	    print map { "\t$_: batch $pids{$_}\n" } sort keys %pids;
	    print "\n";
	    $exitpid = wait();
	    print "wait returned $exitpid\n\n";
	    if($exitpid<0) {
		%pids = ();
	    } else {
		delete $pids{$exitpid};
	    }
	}
	# stoopid but effective - generate a list of files in the given time range
	my @batchfiles = ();
	for $i(0..$#times){
	    $bt = $times[$i];
	    if($bt >= $start_times[$batchno] && $bt <= $start_times[$batchno] + 24 * 3600 * $opt->{'BATCH_LENGTH'}) {
		push(@batchfiles,$files->[$i]);
	    }
	}

	$opt->{OUTPUT_DIR}       =  sprintf("%sbatch-%3.3d",$opt->{BATCH_PREFIX},$batchno);
	$opt->{DEBUG_OUTPUT_PREFIX}  =  sprintf("tmp/o-%3.3d",$batchno);
	$opt->{DIST_CORR_FNAME}  =  sprintf("%scorrelations.pl",$opt->{BATCH_PREFIX},$batchno);
	$opt->{DIST_PARAM_FNAME} =  sprintf("%sdist-params.pl",$opt->{BATCH_PREFIX},$batchno);

	unless( -e $opt->{DIST_CORR_FNAME} && -e $opt->{DIST_PARAM_FNAME} ) {
	    print "correlations.pl or dist-params.pl doesn't exist -- running first batch single-threaded..\n";

	    open SO_SAVE,">&STDOUT";
	    open SE_SAVE,">&STDERR";

	    open STDOUT,sprintf(">log-batch-%3.3d",$batchno);
	    open STDERR,">&STDOUT";

	    hi2_pipeline(\@batchfiles, $opt);

	    fdump($opt, "params-batch-%3.3d.pl",$batchno);

	    open STDOUT,">&SO_SAVE";
	    open STDERR,">&SE_SAVE";

	    close SO_SAVE;
	    close SE_SAVE;
	}
	
	else {
	
	    print "Batch $batchno - sending ".(0+@batchfiles)." files to subprocess: (first is ".$batchfiles[0]."; last is ".$batchfiles[$#batchfiles].")\n";
	    
	    $pid = fork();
	    if($pid<0) {
		die "FORK FAILED!";
	    } 
	    if($pid) {
		# Parent

		$pids{$pid}=$batchno;

		print "Child has pid $pid; pids in progress are:\n";
		print map { "\t$_: batch $pids{$_}\n" } sort keys %pids;
		print "\n";
		
	    } else {
		#Daughter
		eval {
		    open STDOUT,sprintf(">log-batch-%3.3d",$batchno);
		    open STDERR,"&STDOUT";
		    $hash = hi2_pipeline(\@batchfiles,
				 $opt);
		    print "Finished!  Dumping final parameter hash...\n\n";
		    print sdump($opt);
		    fdump($opt, sprintf("params-batch-%3.3d.pl",$batchno));
		};
		if($@) {
		    print "Child: pipeline eval says $@\n";
		}
		print "Child exiting...\n";
		exit(0);
	    }
	}
    }

    # Clean up any leftover processes.
    while( (0 + keys(%pids)) > 0 ) {
	print "Finishing up: waiting for a process to exit..."; 
	$exitpid = wait();

	print "wait returned $exitpid\n\n";

	if($exitpid<0) {
	    %pids = ();
	} else {
	    delete $pids{$exitpid};
	}
    }

}


    
