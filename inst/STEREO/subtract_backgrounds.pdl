=head2 subtract_backgrounds - remove f coronas found by make_backgrounds

=for usage

subtract_backgrounds(\@files, \@backgrounds, $opt);

=for ref

Unlike the hi2 pipeline stuff, subtract_backgrounds works as a
single-image pipeline.  Images are read in from the file list in
\@files and background-subtracted individually.  The backgrounds are
time-dependent and created by make_backgrounds(); the background
from each image is interpolated from the backgrounds.

$files and $backgrounds are both list refs containing file names.

Options are:

=over 3

=item OUTDIR

(default "L2") the directory where files should be put.  Output files
have the same name as input files but are dumped in this directory.

=item WRITE_FILES

(default 1) flag indicating whether to output FITS files.  If it is zero, the results
are NOT written to disk but are instead returned as a data cube.

=back 

=cut

use Date::Parse;
use Date::Format;


sub subtract_backgrounds {
    my $files = shift;
    my $backgrounds = shift;
    
    my $opt = shift || {};

    my $defaults = {
	OUTDIR => "L2",
	WRITE_FILES=>1
    };

    for(keys %$defaults) {
	$opt->{$_} = $defaults->{$_} unless exists($opt->{$_});
    }

    if($opt->{WRITE_FILES}) {
	`mkdir $opt->{OUTDIR}`;
    }

    print "Loading ".(0+@$backgrounds)." background images...\n";
    print "they are: \n\t",join("\n\t",map { "'$_'"} @$backgrounds),"\n\n";
    my @bkg = mrfits(@$backgrounds);
    
    $btimes = pdl( map { str2time($_->hdr->{'DATE-AVG'}) } @bkg );
    print "center times are $btimes...\n";
    
    print "Processing ".(0+@$f)." files...\n";

    for $i(0..$#$files) {
	print "$i of $#$files: reading...";
	my $a=rfits($files->[$i]);

	our $t = str2time($a->hdr->{'DATE-AVG'} || $a->hdr->{'DATE-OBS'});
	print "t=$t  ";	

	$t0dex = which( $t >= $btimes )->max;
	$t1dex = which( $t <= $btimes )->min;

	$t0dex = $t1dex if($t0dex==32767);
	$t1dex = $t0dex if($t1dex==32767);

	print "dexes are $t0dex,$t1dex...";

	if($t0dex==$t1dex) {
	    $a -= $bkg[$t0dex];
	} else {
	    my $dt = $btimes->($t1dex) - $btimes->($t0dex);
	    my $dt0 = $t-$btimes->($t0dex);
	    my $alpha = $dt0 / $dt;

	    print "alpha=$alpha...";
	    
	    $a -= ( (1-$alpha)*$bkg[$t0dex] + $alpha * $bkg[$t1dex] );
	}
	
	if($opt->{WRITE_FILES}) {
	    $ofile = $files->[$i];
	    $ofile =~ s:^.*/::;
	    $ofile = $opt->{OUTDIR}."/".$ofile;
	    print "writing $ofile...";
	    
	    wfits($a,$ofile);
	    print "\n";
	} else {
	    push(@out,float $a);
	}
    }
    if($opt->{WRITE_FILES}==0) {
        $PDL::BIGPDL = 1;
	print "allocating a ".(4*(0+@out)*$out[0]->nelem)." (".join("x",($out[0]->dims,0+@out))." floats)\n";
	return pdl(float,@out);
    }
}
