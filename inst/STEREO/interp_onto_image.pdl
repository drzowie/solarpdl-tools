=head2 interp_onto_image - interpolate point data onto an image

=for ref

You feed in a collection of coordinates and a value at each coordinate, and they get interpolated onto an image
of the specified size, and returned.  If you feed in a single value at each coordinate, you get a single image;
additional values get added in higher dimensions of the image.  

The values are weighted as 1/r^2, rounded to the nearest pixel.

By default the neighborhood of a point is 100x100 pixels.

=for author

Craig DeForest, 8-Mar-2011
May be redistributed under the Perl Artistic License.

=cut

sub interp_onto_image {
    my $im_size = shift; # array ref only please.
    my $points = shift;  # ndims x npoints
    my $data = shift;    # ndata x npoints
    my $n_size = shift;
    $n_size = 100 unless( defined($n_size));
    my $power = shift;
    $power = 2 unless(defined($power));

    my @odims = @$im_size;

    my $wgt = zeroes(@odims) + 1/$n_size/$n_size ;           # Weighting array

    push(@odims,$points->dim(0));
    my $out = zeroes(@odims);           # Data output array 

    my $ns = $n_size * ones($data->dim(0)); # neighborhood - force to size of data vector
    my $rv = rvals($ns->list) + 1e-3;
    my $rw = 1/($rv ** $power);
    my $rw1 = $rw->(*1);

    print "ns=$ns\n";
    for $i(0..$points->dim(1)-1) {
	$p = $points->(:,($i));
	
	$out->range( $p - $ns/2, $ns, 't' )->mv(-1,0) += $rw1 * $data->(:,($i));
	$wgt->range( $p - $ns/2, $ns, 't' ) += $rw;

	print "." unless ($i%100);
    }

    return $out / $wgt;
}

	
	
	
    
    
    
