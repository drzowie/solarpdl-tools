=head2 hi1_pipeline_batch 

=for usage

 hi1_pipeline_batch($batchno, $opt);

=for ref

hi1_pipeline_batch runs a single batch of files through the hi1
pipeline.  Batches are organized by day of year. Batch 0 begins at 
midnight 2007-Jan-1.  Subsequent batches begin on an 0.5 day cadence.
The files are retrieved from the L1 archive and dumped into "batch-<foo>" 
output directories.

On success, hi1_pipeline_batch returns silently.  On failure, it throws
an exception and $@ is set to the reason it failed.

hi1_pipeline handles options with the rest of the pipeline code --
options are passed through.  Locally parsed options are:

=over 3

=item HI1_SC

This should contain "a" or "b".  It defaults to "a".

=item HI1_L1_DIR 

This is the directory where level-1 files may be found.  (Default is
C<< /net/helio/d0/stereo/L1/<HI1_SC>/img/hi_1 >>).  Files are expected
to be organized in daily directories named in C<yyyymmdd> form.

=item HI1_OUTPUT_TEMPLATE

This is the output directory as a sprintf template string.  Default is
"hi1-batch-%4.4d".

=back

=cut

use Date::Parse;
use Date::Format;
use PDL::IO::Dumper;

sub hi1_pipeline_batch {
    my $batchno = shift;
    my $opt = shift // {};

    # Force particular options
    $opt->{BATCHLENGTH} = 5;   # days
    $opt->{BATCH_STEP}  = 0.5; # days
    $opt->{CADENCE}     = 40;  # minutes for nominal cadence for the instrument

    my $opt_defaults = {
     HI1_SC              => "a",
     HI1_L1_DIR          => "/net/helio/d0/stereo/L1/%s/img/hi_1",
     HI1_OUTPUT_TEMPLATE => "hi1-batch-%4.4d"
    };

    for $k(keys %$opt_defaults){
	$opt->{$k} = $opt_defaults->{$k} unless exists($opt->{$k});
    }
    print "opt is ".sdump($opt);

    unless($opt->{HI1_SC} =~ m/^[ab]$/) {
	die "hi1_pipeline_batch: HI1_SC option must contain 'a' or 'b' to specify a spacecraft\n";
    }

    my $l1dir = sprintf($opt->{HI1_L1_DIR}, $opt->{HI1_SC});

    # Figure batch time range from batch number
    my $t0 = str2time("2007-01-01T00:00:00Z");
    $t0 += $batchno * $opt->{BATCH_STEP} * 24 * 3600;
    my $t1 = $t0 + $opt->{BATCHLENGTH} * 24 * 3600;
    
    ##############################
    # Now figure the directories to inspect
    my @dirlist = ();
    for($i=$t0; $i<$t1; $i+= 3600*24){
	push(@dirlist, $l1dir."/".time2str("%Y%m%d",$i,'Z'));
    }
    print "dirlist is ".join(",",@dirlist)."\n";

    
    ##############################
    # Assemble a file list.  Do some rudimentary validation of the files.

    ## @fcheck gets a list of files to check.
    my @fcheck = map { (<$_/*>) } @dirlist;
    
    ## @f gets a list of files that seem OK at first glance. 
    ## @cr gets the CROTA history.  If the spacecraft turns more than a little,
    ## then the file gets rejected - but we have to get the whole dataset before
    ## we can carry out that rejection.
    my @f = ();
    my @cr = ();

    ## Accumulate probably-ok files and their CROTA values into @f and @cr.
    for $fc(@fcheck) {
	print "\n$fc ";
	my $h = eval { rfits($fc,{data=>0}) };
	next unless(ref($h) eq 'HASH');
	
	my $ht = str2time($h->{'DATE-OBS'});
	print "ht:$h->{'DATE-OBS'}  ";
	next unless($ht >= $t0  and  $ht < $t1);
	
	print "SIZ:$h->{NAXIS1}x$h->{NAXIS2}  ";
	next unless($h->{NAXIS1} > 1000);
	next unless($h->{NAXIS2} > 1000);

	print "exp:$h->{EXPTIME}  ";
	next unless($h->{EXPTIME} > 1000);
	
	push(@f, $fc);
	push(@cr, $h->{CROTA});
    }
    print "\n\n";

    ## Now look for files that deviate by more than a degree
    ## from the median of the batch, and reject those.
    my $cr = pdl(@cr);
    my $crmed = $cr->median;
    my @crok = (abs($cr - $crmed) < 1 )->list;

    print "crmed is $crmed; cr is $cr\n";
    
    my @ff = ();
    for $i(0..$#f){
	push(@ff, $f[$i]) if($crok[$i]);
    }

    my $n_expected = $opt->{BATCHLENGTH} * 24 * 60 / $opt->{CADENCE};
    
    if(@ff < $n_expected * 0.8) {
	die "Too few files to run batch $batchno -- expected $n_expected, found ".(0+@ff)."\n";
    }

    $opt->{OUTPUT_FILES} = 1;
    $opt->{OUTPUT_DIR} = sprintf($opt->{HI1_OUTPUT_TEMPLATE},$batchno);
    
    hi1_pipeline(\@ff, $opt);
}
    
    
    
    


