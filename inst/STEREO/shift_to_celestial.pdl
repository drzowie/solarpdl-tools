sub shift_to_celestial {
    my $hash = shift;
    my $opt = shift;

    $opt = {} unless(defined $opt);
    $opt->{'ALIGN_DEJITTER'} = 1    unless(defined $opt->{'ALIGN_DEJITTER'});
    $opt->{'ALIGN_PATCHSIZE'} = 50  unless(defined $opt->{'ALIGN_PATCHSIZE'});
    $opt->{'INTERP_METHOD'} = 'j'   unless(defined $opt->{'INTERP_METHOD'}); # use default for science
    

    $xr = $hash->{'D_PARAMS'}->{'xr'};
    $yr = $hash->{'D_PARAMS'}->{'yr'};

    if(!defined($xr)) {
	die("shift_to_celestial: hash->{D_PARAMS}->{xr} not defined!");
    }
    if(!defined($yr)) {
	print "shift_to_celestial: yr not defined!  Choosing 100 - 923...\n";
	$yr = pdl(100,923);
	$hash->{'D_PARAMS'}->{'yr'} = $yr->copy;
    }

    $hash->{'CEL_CUBE'} = zeroes(float, 
				 $xr->at(1)-$xr->at(0),
				 $yr->at(1)-$yr->at(0),
				 $hash->{'BKSUB_CUBE'}->dim(2)
	);
    $hash->{'CEL_MASK'} = zeroes(byte,
				 $xr->at(1)-$xr->at(0),
				 $yr->at(1)-$yr->at(0),
				 $hash->{'BKSUB_CUBE'}->dim(2)
	);

    my $dex0 = int($hash->{UTIME}->dim(0)/2);
    my $t0 = $hash->{UTIME}->(($dex0));
    my $h0 = $hash->{RAW_HDRS}->[$dex0];
    
    our $t_nl = t_nl(@{$hash->{'D_PARAMS'}->{'tnl_params'}});

    my $x_center = ($xr->at(1)+$xr->at(0))/2;
    my $y_center = ($yr->at(1)+$yr->at(0))/2;

    my $t_patchcrop = t_linear(pre=>[ - $x_center + $opt->{'ALIGN_PATCHSIZE'}/2,
				      - $y_center + $opt->{'ALIGN_PATCHSIZE'}/2
				      ]
	);
    
    our $master_patch = ($hash->{'BKSUB_CUBE'}->(:,:,($dex0)) * $hash->{'MASK_CUBE'}->(:,:,($dex0))) -> map(
	$t_patchcrop, # x !$t_nl x t_identity x $t_nl  [ trivial stuff commented out ]
	[$opt->{'ALIGN_PATCHSIZE'},$opt->{'ALIGN_PATCHSIZE'}],
	{method=>$opt->{'INTERP_METHOD'},pix=>1,blur=>1.5}
	);

    
    for $i(0..$hash->{'BKSUB_CUBE'}->dim(2)-1) {
	print "Resampling image $i of ".$hash->{'BKSUB_CUBE'}->dim(2)."...\n";

	my $delta_t =  ($t0 - $hash->{'UTIME'}->(($i)) ) / 3600 /24;
	my $orbital_rotation = $hash->{'D_PARAMS'}->{'ospeed'} * $delta_t;
	print "Shifting by $delta_t days ($orbital_rotation degrees)...\n";
	my $t_o = t_linear(pre=> [ $orbital_rotation, 0]);
	my $corr;
	my $nudge;

	if($opt->{ALIGN_DEJITTER}) {

	    my $heur = sub {
		my $dx = shift;
		my $t_z = t_linear(pre=>[$dx->list]);
		our $newpatch = ($hash->{'BKSUB_CUBE'}->(:,:,($i)) * $hash->{'MASK_CUBE'}->(:,:,($i)))->map(
		    $t_patchcrop x $t_z x !$t_nl x $t_o x $t_nl,
		    [$opt->{'ALIGN_PATCHSIZE'},$opt->{'ALIGN_PATCHSIZE'}],
		    {method=>$opt->{'INTERP_METHOD'},pix=>1,blur=>1.5}
		    );
		my $p0 = $master_patch->clump(2);
		my $p1 = $newpatch->clump(2);
		my $p0av = $p0->average;
		my $p0p = $p0 - $p0av->(*1);
		my $p0sd = ($p0p * $p0p)->average->sqrt;
		
		my $p1av = $p1->average;
		my $p1p = $p1 - $p1av->(*1);
		my $p1sd = ($p1p * $p1p)->average->sqrt;
		$corr = ($p0p * $p1p)->average / $p0sd / $p1sd;
		return 1.0 - $corr;
	    };
	    print "Finding nudge...";
	    $nudge = amoeba($heur, pdl(0,0),0.1,1e-3,1e-5,1e3);
	    print "nudge is $nudge, corr is $corr.  ";
	} else {
	    $nudge = pdl(0,0);
	}
	    
	my $t_crop = t_linear(pre=>[ - $xr->at(0) + $nudge->at(0), -$yr->at(0) + $nudge->at(1)]);
	    
	print "data...";

	$hash->{'BKSUB_CUBE'}->badflag(1);
	$hash->{'CEL_CUBE'}->badflag(1);

	$hash->{'CEL_CUBE'}->(:,:,($i)) .= 
	    $hash->{'BKSUB_CUBE'}->(:,:,($i))->map(
		$t_crop x !$t_nl x $t_o x $t_nl, 
		[$xr->at(1)-$xr->at(0), $yr->at(1)-$yr->at(0)], 
		{method=>$opt->{'INTERP_METHOD'}, pix=>1}
	    );
	    
	    print "mask...";
	$hash->{'CEL_MASK'}->(:,:,($i)) .= 
	    $hash->{'MASK_CUBE'}->(:,:,($i))->map(
		$t_crop x !$t_nl x $t_o x $t_nl,
		[$xr->at(1)-$xr->at(0),$yr->at(1)-$yr->at(0)],
		{method=>'s',pix=>1}
	    );
	    
	print ($hash->{CEL_MASK}->(:,:,$i)->sum)." OK points\n";

    }
    
    
    return $hash;
}
