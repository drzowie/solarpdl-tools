=head2 shift_to_instrument - part of the hi2 pipeline.

=for ref

Shifts the cleaned images (that are in celestial coordinates, in CEL_CUBE) back to observing 
coordinates.  To save memory, the RAW_CUBE variable is re-used (and overwritten).

=cut

sub shift_to_instrument {
    my $hash = shift;
    my $opt = shift;

    $opt = {} unless(defined $opt);

    $xr = $hash->{'D_PARAMS'}->{'xr'};
    $yr = $hash->{'D_PARAMS'}->{'yr'};

    # Clone bksub_cube to clean_cube in the master hash.  bksub_cube gets overwritten but
    # is left in place in case we re-run shift_to_instrument...
    $hash->{'CLEAN_CUBE'} = $hash->{'BKSUB_CUBE'};

    my $dex0 = int($hash->{UTIME}->dim(0)/2);
    my $t0 = $hash->{UTIME}->(($dex0));
    my $h0 = $hash->{RAW_HDRS}->[$dex0];
    
    our $t_nl = t_nl(@{$hash->{'D_PARAMS'}->{'tnl_params'}});

    for $i(0..$hash->{'BKSUB_CUBE'}->dim(2)-1) {
	print "Resampling image $i of ".$hash->{'BKSUB_CUBE'}->dim(2)." back to observing coordinates...\n";

	my $delta_t =  ($t0 - $hash->{'UTIME'}->(($i)) ) / 3600 /24;
	my $orbital_rotation = $hash->{'D_PARAMS'}->{'ospeed'} * $delta_t;

	print "Shifting by $delta_t days (".(-$orbital_rotation)." degrees)...\n";
	my $t_o = t_linear(pre=> [ $orbital_rotation, 0]);

        my $t_crop = t_linear(pre=>[ - $xr->at(0) , -$yr->at(0) ]);

	$hash->{'CLEAN_CUBE'}->(:,:,($i)) .= 
	    $hash->{'CEL_CUBE'}->(:,:,($i))->map(
		!$t_nl x !$t_o x $t_nl x !$t_crop, 
		[$hash->{BKSUB_CUBE}->dim(0),$hash->{BKSUB_CUBE}->dim(1)],
		{method=>'j', pix=>1}
	    );
    }

    return $hash;
}
