=head2 max_horiz_range - identify the widest extent of valid imagery in a data processing hash

=for usage

 $xr = max_horiz_range($hash,$opt)

=for ref

The input hash should have have the BKSUB_CUBE element.  This routine is normally called from GET_DISTORTION_PARAMS.

=cut

sub max_horiz_range {
    my $hash = shift;
    my $opt = shift;

    $opt = {} unless defined($opt);

    $opt->{HORIZ_BADTHRESH} = 100  unless( exists($opt->{HORIZ_BADTHRESH}) );
    $opt->{HORIZ_BADCOUNT}  = 250  unless( exists($opt->{HORIZ_BADCOUNT}) );
    $opt->{HORIZ_MARGIN}    = 20   unless( exists($opt->{HORIZ_MARGIN}) );
    $opt->{HORIZ_XMIN}      = 150  unless( exists($opt->{HORIZ_XMIN}) );
    $opt->{HORIZ_XMAX}      = 875  unless( exists($opt->{HORIZ_XMAX}) );

    my $badthresh = $opt->{HORIZ_BADTHRESH};  # how many DN/sec to be bad?
    my $badcount = $opt->{HORIZ_BADCOUNT};    # how many bad pixels allowed in a column before the col is marked bad?
    my $margin = $opt->{HORIZ_MARGIN};        # how much margin do we leave before the bad cols?

    # Identify (X,t) of columns that are OK -- $okcols is 2-D.
    my $okcols = ($hash->{'BKSUB_CUBE'}->mv(1,0) > $badthresh)->sumover < $badcount;

    # all_ok shows which columns (in X) are OK.
    my $all_ok = $okcols->mv(1,0)->andover;
    
    my $center = $hash->{'BKSUB_CUBE'}->dim(0)/2;
    my $i;

    # Walk out from the center to identify the range.
    for( $i=$center; $all_ok->(($i)) && $i <= $opt->{HORIZ_XMAX}; $i++) {}
    my $maxcol = $i - $margin;
    
    for( $i=$center; $all_ok->(($i)) && $i >= $opt->{HORIZ_XMIN}; $i--) {}
    my $mincol = $i + $margin;

    if($maxcol - $mincol < 60) {
    print "HORIZ_BADTHRESH=$opt->{HORIZ_BADTHRESH}\n";
	die("Not enough good columns in max_horiz_range (".($maxcol-$mincol).")-- check data quality\n");
    }

    return [$mincol,$maxcol];
}
