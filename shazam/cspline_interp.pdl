=sub cspline_interp - interpolate using csplines (compiled)

=for usage

$out = cspline_interp($data, $loc, $c)

=for signature

cspline_interp( data(n), loc(), [o]out(), $c )

=for ref

1-D spline interpolation on a dataset (threaded), with boundary
conditions.  $c is a Perl scalar containing the bouy condition as a
single character.  It may be undefined, in which case the default
condition is extension. Valid conditions are 'e' (extension), 't' (truncation), 
'p' (periodic), or 'm' (mirror).

=cut

sub cspline_interp {
    my $data = shift;
    my $loc = shift;
    my $c = pdl(shift || 0);
    my $bound = shift || 'e';
    
    PDL::my_cspline_interp($data,$loc,$c,$bound);
}

no PDL::NiceSlice;
use Inline PDLPP => <<'EOF'

pp_def('my_cspline_interp',
	Pars=>'dat(k); index(); c(); [o]out();',
	OtherPars=>'char bound',
	Inplace=>0,
	Code=> <<'EOC'
	long i;
	long dex;
       double index;
       double p[4];
       long n;

       index = $index();
       n = $SIZE(k);

       // dex gets floor(index), index gets the remainder.
       dex = (long)(fabs(index));
       if(index < 0) {
	 dex *= -1;
	 dex -= 1;
       }
       index -= dex; 

       // Assemble an array of the (boundaried) four points surrounding the original.
       dex -= 1;
       for(i=0; i<4; i++,dex++) {
	 if(dex < 0 || dex > n-1) {
	   switch($COMP(bound)) {
	   case 'e':  p[i] = (dex < 0) ? $dat(k=>0) : $dat(k => n-1);               break;
	   case 't':  p[i] = 0;               	                                    break;
	   case 'p':  {
	     long kk = (((dex < 0) ? (dex + dex * n) : dex) % n);
	     p[i] = $dat(k => kk); 
	   } break;
	   default:   die("my_cspline_interp: boundary violation problems\n");      break;
	   }
	 } else {
	   p[i] = $dat(k => dex);
	 }
       }
       
       // do the actual calculation (see, e.g., http://en.wikipedia.org/wiki/Cspline)
       {
	 double index1 = 1 - index;
	 double h00 = (1 + 2*index) * index1 * index1;
	 double h10 = index * index1 * index1;
	 double h01 = index * index * (3 - 2*index);
	 double h11 = - index * index * index1;
	 double m0 = 0.5 * (1 - $c()) * (p[2] - p[0]);
	 double m1 = 0.5 * (1 - $c()) * (p[3] - p[1]);

	 $out() = h00 * p[1] + h10 * m0 + h01 * p[2] + h11 * m1;
       }
EOC
       );
EOF
